{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#aniwrap","title":"aniwrap","text":"<p>An asynchronous wrapper for the MyAnimeList V2 API.</p> <p>Aniwrap aims to make it easier to interact with MAL API.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>The library is still in Alpha, and the features may change at any time.</p>"},{"location":"#installation","title":"Installation","text":"<p>Python version 3.10 or greater is required to use aniwrap.</p> <pre><code>pip install aniwrap\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Search anime and manga by name</li> <li>Fetch anime and manga details by ID</li> <li>Fetch seasonal anime</li> <li>Fetch anime and manga rankings</li> <li>Fetch forum boards and discussions</li> <li>Fetch and manipulate user's anime and manga list using user's access token</li> </ul>"},{"location":"#usage","title":"Usage","text":"<ul> <li>Example of using anime and manga related actions</li> </ul> <pre><code>from  aniwrap  import  Client\nclient = Client(\"your MAL client Id\")\nanime_search_result = await client.anime.search_anime(\"attack on titan\")\nmanga_search_result = await client.manga.search_manga(\"attack on titan\")\nif anime_search_result.is_success:\nanime_results = anime_search_result.value\nif anime_search_result.is_error:\nerror = anime_search_result.error\nif manga_search_result.is_success:\nmanga_results = manga_search_result.value\nif manga_search_result.is_error:\nerror = manga_search_result.error\nawait  client.close()\n</code></pre> <ul> <li>Example of using user related actions</li> </ul> <pre><code>from aniwrap import UserClient\nuser_client = UserClient(\"user's access token\")\nanime_list_result = await user_client.user.get_anime_list(\"user's username\")\nmanga_list_result = await user_client.user.get_manga_list(\"user's username\")\nif anime_list_result.is_success:\nanime_list = anime_list_result.value\nif anime_list_result.is_error:\nerror = anime_list_result.error\nif manga_list_result.is_success:\nmanga_list = manga_list_result.value\nif manga_list_result.is_error:\nerror = manga_list_result.error\nawait  user_client.close()\n</code></pre> <p>You can find information on generating Client Id and user's access token used in the above examples on MAL documentation.</p>"},{"location":"#issues","title":"Issues","text":"<p>If you're facing any problems with the library, please open an issue here.</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Credits to Jonxslays's wom.py. Lot of stuff is ~~copied~~ inspired from wom.py.</li> </ul>"},{"location":"#license","title":"License","text":"<p>aniwrap is licensed under MIT License.</p>"},{"location":"reference/client/","title":"client","text":"<p>This module has the client to connect to MAL API.</p>"},{"location":"reference/client/#aniwrap.client.Client","title":"Client","text":"<p>An asynchronous client used to interact with the MAL API.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The MAL Client Id to be used with the requests.</p> required Source code in <code>aniwrap/client.py</code> <pre><code>class Client:\n\"\"\"An asynchronous client used to interact with the MAL API.\n    Args:\n        client_id: The MAL Client Id to be used with the requests.\n    \"\"\"\n__slots__ = (\"_http\", \"_serializer\", \"_anime\", \"_manga\", \"_forum\")\ndef __init__(self, client_id: str) -&gt; None:\nself._http = services.HttpService(client_id=client_id)\nself._serializer = serializer.Serializer()\nself._anime = services.AnimeService(self._http, self._serializer)\nself._manga = services.MangaService(self._http, self._serializer)\nself._forum = services.ForumService(self._http, self._serializer)\n@property\ndef anime(self) -&gt; services.AnimeService:\n\"\"\"The [`AnimeService`][aniwrap.AnimeService] used to make anime related requests.\"\"\"\nreturn self._anime\n@property\ndef manga(self) -&gt; services.MangaService:\n\"\"\"The [`MangaService`][aniwrap.MangaService] used to make manga related requests.\"\"\"\nreturn self._manga\n@property\ndef forum(self) -&gt; services.ForumService:\n\"\"\"The [`ForumService`][aniwrap.ForumService] used to make forum related requests.\"\"\"\nreturn self._forum\nasync def close(self) -&gt; None:\n\"\"\"Close the existing client session.\n        !!! warning\n            You will receive an error in your console if this is not called before the program terminates.\n        \"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#aniwrap.client.Client.anime","title":"anime  <code>property</code>","text":"<pre><code>anime: services.AnimeService\n</code></pre> <p>The <code>AnimeService</code> used to make anime related requests.</p>"},{"location":"reference/client/#aniwrap.client.Client.forum","title":"forum  <code>property</code>","text":"<pre><code>forum: services.ForumService\n</code></pre> <p>The <code>ForumService</code> used to make forum related requests.</p>"},{"location":"reference/client/#aniwrap.client.Client.manga","title":"manga  <code>property</code>","text":"<pre><code>manga: services.MangaService\n</code></pre> <p>The <code>MangaService</code> used to make manga related requests.</p>"},{"location":"reference/client/#aniwrap.client.Client.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the existing client session.</p> <p>Warning</p> <p>You will receive an error in your console if this is not called before the program terminates.</p> Source code in <code>aniwrap/client.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Close the existing client session.\n    !!! warning\n        You will receive an error in your console if this is not called before the program terminates.\n    \"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#aniwrap.client.UserClient","title":"UserClient","text":"<p>An asynchronous client used to interact with the user methods of MAL API.</p> <p>Parameters:</p> Name Type Description Default <code>access_token</code> <code>str</code> <p>The access token that is generated using the MAL oauth flow. </p> required <p>Note</p> <p>The <code>access_token</code> will be unique for each MAL user.</p> Source code in <code>aniwrap/client.py</code> <pre><code>class UserClient:\n\"\"\"\n    An asynchronous client used to interact with the user methods of MAL API.\n    Args:\n        access_token: The access token that is generated using the MAL oauth flow. \n    !!! Note    \n        The `access_token` will be unique for each MAL user.\n    \"\"\"\n__slots__ = (\"_http\", \"_serializer\", \"_user\")\ndef __init__(self, access_token: str) -&gt; None:\nself._http = services.HttpService(access_token=access_token)\nself._serializer = serializer.Serializer()\nself._user = services.UserService(self._http, self._serializer)\n@property\ndef user(self) -&gt; services.UserService:\n\"\"\"\"\"\"\nreturn self._user\nasync def close(self) -&gt; None:\n\"\"\"Close the existing client session.\n        !!! warning\n            You will receive an error in your console if this is not called before the program terminates.\n        \"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#aniwrap.client.UserClient.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the existing client session.</p> <p>Warning</p> <p>You will receive an error in your console if this is not called before the program terminates.</p> Source code in <code>aniwrap/client.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Close the existing client session.\n    !!! warning\n        You will receive an error in your console if this is not called before the program terminates.\n    \"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/enums/","title":"enums","text":"<p>Module for all enums related to the project.</p>"},{"location":"reference/enums/#aniwrap.enums.AnimeListSortType","title":"AnimeListSortType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the different sort types of user anime list.</p> Source code in <code>aniwrap/enums/user.py</code> <pre><code>class AnimeListSortType(BaseEnum):\n\"\"\"Represents the different sort types of user anime list.\"\"\"\nListScore = \"list_score\"\n\"\"\"Sorts the anime list in the descending order of score.\"\"\"\nListUpdatedAt = \"list_updated_at\"\n\"\"\"Sorts the anime list in the descending order of last updated time.\"\"\"\nAnimeTitle = \"anime_title\"\n\"\"\"Sorts the anime list in the ascending order of anime title.\"\"\"\nAnimeStartDate = \"anime_start_date\"\n\"\"\"Sorts the anime list in the descending order of anime start date.\"\"\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.user.AnimeListSortType.AnimeStartDate","title":"AnimeStartDate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AnimeStartDate = 'anime_start_date'\n</code></pre> <p>Sorts the anime list in the descending order of anime start date.</p>"},{"location":"reference/enums/#aniwrap.enums.user.AnimeListSortType.AnimeTitle","title":"AnimeTitle  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AnimeTitle = 'anime_title'\n</code></pre> <p>Sorts the anime list in the ascending order of anime title.</p>"},{"location":"reference/enums/#aniwrap.enums.user.AnimeListSortType.ListScore","title":"ListScore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ListScore = 'list_score'\n</code></pre> <p>Sorts the anime list in the descending order of score.</p>"},{"location":"reference/enums/#aniwrap.enums.user.AnimeListSortType.ListUpdatedAt","title":"ListUpdatedAt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ListUpdatedAt = 'list_updated_at'\n</code></pre> <p>Sorts the anime list in the descending order of last updated time.</p>"},{"location":"reference/enums/#aniwrap.enums.AnimeRankingType","title":"AnimeRankingType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the anime ranking type.</p> Source code in <code>aniwrap/enums/anime.py</code> <pre><code>class AnimeRankingType(BaseEnum):\n\"\"\"Represents the anime ranking type.\"\"\"\nAll = \"all\"\n\"\"\"Represents top anime series.\"\"\"\nAiring = \"airing\"\n\"\"\"Represents top airing anime.\"\"\"\nUpcoming = \"upcoming\"\n\"\"\"Represents top upcoming anime.\"\"\"\nTv = \"tv\"\n\"\"\"Represents top TV anime series.\"\"\"\nOva = \"ova\"\n\"\"\"Represents top anime OVA series.\"\"\"\nMovie = \"movie\"\n\"\"\"Represents top anime movies.\"\"\"\nSpecial = \"special\"\n\"\"\"Represents top anime specials.\"\"\"\nByPopularity = \"bypopularity\"\n\"\"\"Represents top anime by popularity.\"\"\"\nFavorite = \"favorite\"\n\"\"\"Represents top favourited anime.\"\"\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.Airing","title":"Airing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Airing = 'airing'\n</code></pre> <p>Represents top airing anime.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.All","title":"All  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>All = 'all'\n</code></pre> <p>Represents top anime series.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.ByPopularity","title":"ByPopularity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ByPopularity = 'bypopularity'\n</code></pre> <p>Represents top anime by popularity.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.Favorite","title":"Favorite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Favorite = 'favorite'\n</code></pre> <p>Represents top favourited anime.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.Movie","title":"Movie  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Movie = 'movie'\n</code></pre> <p>Represents top anime movies.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.Ova","title":"Ova  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Ova = 'ova'\n</code></pre> <p>Represents top anime OVA series.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.Special","title":"Special  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Special = 'special'\n</code></pre> <p>Represents top anime specials.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.Tv","title":"Tv  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Tv = 'tv'\n</code></pre> <p>Represents top TV anime series.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeRankingType.Upcoming","title":"Upcoming  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Upcoming = 'upcoming'\n</code></pre> <p>Represents top upcoming anime.</p>"},{"location":"reference/enums/#aniwrap.enums.AnimeRewatchValue","title":"AnimeRewatchValue","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the anime rewatch value.</p> Source code in <code>aniwrap/enums/user.py</code> <pre><code>class AnimeRewatchValue(BaseEnum):\n\"\"\"Represents the anime rewatch value.\"\"\"\nEmpty = 0\nVeryLow = 1\nLow = 2\nMedium = 3\nHigh = 4\nVeryHigh = 5\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.AnimeSeason","title":"AnimeSeason","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents anime Season.</p> Source code in <code>aniwrap/enums/anime.py</code> <pre><code>class AnimeSeason(BaseEnum):\n\"\"\"Represents anime Season.\"\"\"\nWinter = \"winter\"\n\"\"\"Represents winter - January, February, March months.\"\"\"\nSpring = \"spring\"\n\"\"\"Represents spring - April, May, June.\"\"\"\nSummer = \"summer\"\n\"\"\"Represents summer - July, August, September.\"\"\"\nFall = \"fall\"\n\"\"\"Represents fall - October, November, December.\"\"\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeSeason.Fall","title":"Fall  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Fall = 'fall'\n</code></pre> <p>Represents fall - October, November, December.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeSeason.Spring","title":"Spring  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Spring = 'spring'\n</code></pre> <p>Represents spring - April, May, June.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeSeason.Summer","title":"Summer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Summer = 'summer'\n</code></pre> <p>Represents summer - July, August, September.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeSeason.Winter","title":"Winter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Winter = 'winter'\n</code></pre> <p>Represents winter - January, February, March months.</p>"},{"location":"reference/enums/#aniwrap.enums.AnimeSortType","title":"AnimeSortType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the type of ways anime result can be sorted.</p> Source code in <code>aniwrap/enums/anime.py</code> <pre><code>class AnimeSortType(BaseEnum):\n\"\"\"Represents the type of ways anime result can be sorted.\"\"\"\nAnimeScore = \"anime_score\"\n\"\"\"Sorts the anime result based on score of the anime on mal in descending order.\"\"\"\nNumberOfUsers = \"anime_num_list_users\"\n\"\"\"Sorts the anime result based on the number of users added the anime to their list on mal in descending order.\"\"\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeSortType.AnimeScore","title":"AnimeScore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AnimeScore = 'anime_score'\n</code></pre> <p>Sorts the anime result based on score of the anime on mal in descending order.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeSortType.NumberOfUsers","title":"NumberOfUsers  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NumberOfUsers = 'anime_num_list_users'\n</code></pre> <p>Sorts the anime result based on the number of users added the anime to their list on mal in descending order.</p>"},{"location":"reference/enums/#aniwrap.enums.AnimeStatus","title":"AnimeStatus","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents all available Anime status.</p> Source code in <code>aniwrap/enums/anime.py</code> <pre><code>class AnimeStatus(BaseEnum):\n\"\"\"Represents all available Anime status.\"\"\"\nAiring = \"currently_airing\"\n\"\"\"Represents currently airing anime\"\"\"\nFinished = \"finished_airing\"\n\"\"\"Represents anime that are finished airing.\"\"\"\nNotAired = \"not_yet_aired\"\n\"\"\"Represents anime that are yet to be aired.\"\"\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeStatus.Airing","title":"Airing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Airing = 'currently_airing'\n</code></pre> <p>Represents currently airing anime</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeStatus.Finished","title":"Finished  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Finished = 'finished_airing'\n</code></pre> <p>Represents anime that are finished airing.</p>"},{"location":"reference/enums/#aniwrap.enums.anime.AnimeStatus.NotAired","title":"NotAired  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NotAired = 'not_yet_aired'\n</code></pre> <p>Represents anime that are yet to be aired.</p>"},{"location":"reference/enums/#aniwrap.enums.AnimeType","title":"AnimeType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents type of the Anime.</p> Source code in <code>aniwrap/enums/anime.py</code> <pre><code>class AnimeType(BaseEnum):\n\"\"\"Represents type of the Anime.\"\"\"\nMovie = \"movie\"\nOna = \"ona\"\nOva = \"ova\"\nSpecial = \"special\"\nTv = \"tv\"\nUnknown = \"unknown\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.AnimeWatchStatus","title":"AnimeWatchStatus","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the status of anime in the user's anime list.</p> Source code in <code>aniwrap/enums/user.py</code> <pre><code>class AnimeWatchStatus(BaseEnum):\n\"\"\"Represents the status of anime in the user's anime list.\"\"\"\nWatching = \"watching\"\nCompleted = \"completed\"\nOnHold = \"on_hold\"\nDropped = \"dropped\"\nPlanToWatch = \"plan_to_watch\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.BaseEnum","title":"BaseEnum","text":"<p>         Bases: <code>Enum</code></p> <p>BaseEnum from which all the other enums inherit from.</p> Source code in <code>aniwrap/enums/base.py</code> <pre><code>class BaseEnum(Enum):\n\"\"\"BaseEnum from which all the other enums inherit from.\"\"\"\ndef __str__(self) -&gt; str:\nreturn self.value\n@classmethod\ndef from_str(cls: Type[T], value: str) -&gt; T:\n\"\"\"Generate the enum from the given string value.\n        Args:\n            value: The string value to generate from.\n        Returns:\n            The generated enum.\n        \"\"\"\nreturn cls(value)\n@classmethod\ndef try_from_str(cls: Type[T], value: str) -&gt; T | None:\n\"\"\"Try to generate the enum from the given value.\n        Args:\n            value: the string value to generate the enum from.\n        Returns:\n            The generated enum or `None` if the value is not valid.\n        \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError:\nreturn None\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.base.BaseEnum.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(value: str) -&gt; T\n</code></pre> <p>Generate the enum from the given string value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The string value to generate from.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The generated enum.</p> Source code in <code>aniwrap/enums/base.py</code> <pre><code>@classmethod\ndef from_str(cls: Type[T], value: str) -&gt; T:\n\"\"\"Generate the enum from the given string value.\n    Args:\n        value: The string value to generate from.\n    Returns:\n        The generated enum.\n    \"\"\"\nreturn cls(value)\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.base.BaseEnum.try_from_str","title":"try_from_str  <code>classmethod</code>","text":"<pre><code>try_from_str(value: str) -&gt; T | None\n</code></pre> <p>Try to generate the enum from the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>the string value to generate the enum from.</p> required <p>Returns:</p> Type Description <code>T | None</code> <p>The generated enum or <code>None</code> if the value is not valid.</p> Source code in <code>aniwrap/enums/base.py</code> <pre><code>@classmethod\ndef try_from_str(cls: Type[T], value: str) -&gt; T | None:\n\"\"\"Try to generate the enum from the given value.\n    Args:\n        value: the string value to generate the enum from.\n    Returns:\n        The generated enum or `None` if the value is not valid.\n    \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError:\nreturn None\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.ListPriority","title":"ListPriority","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the priority(?) of the anime/manga in the list.</p> Source code in <code>aniwrap/enums/user.py</code> <pre><code>class ListPriority(BaseEnum):\n\"\"\"Represents the priority(?) of the anime/manga in the list.\"\"\"\nLow = 0\nMedium = 1\nHigh = 2\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.MangaListSortType","title":"MangaListSortType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the different sort types of user manga list.</p> Source code in <code>aniwrap/enums/user.py</code> <pre><code>class MangaListSortType(BaseEnum):\n\"\"\"Represents the different sort types of user manga list.\"\"\"\nListScore = \"list_score\"\n\"\"\"Sorts the manga list in the descending of the score.\"\"\"\nListUpdatedAt = \"list_updated_at\"\n\"\"\"Sorts the manga list in the descending of the last updated time.\"\"\"\nMangaTitle = \"manga_title\"\n\"\"\"Sorts the manga list in the ascending of the manga title.\"\"\"\nMangaStartDate = \"manga_start_date\"\n\"\"\"Sorts the manga list in the descending of the manga start date.\"\"\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.user.MangaListSortType.ListScore","title":"ListScore  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ListScore = 'list_score'\n</code></pre> <p>Sorts the manga list in the descending of the score.</p>"},{"location":"reference/enums/#aniwrap.enums.user.MangaListSortType.ListUpdatedAt","title":"ListUpdatedAt  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ListUpdatedAt = 'list_updated_at'\n</code></pre> <p>Sorts the manga list in the descending of the last updated time.</p>"},{"location":"reference/enums/#aniwrap.enums.user.MangaListSortType.MangaStartDate","title":"MangaStartDate  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MangaStartDate = 'manga_start_date'\n</code></pre> <p>Sorts the manga list in the descending of the manga start date.</p>"},{"location":"reference/enums/#aniwrap.enums.user.MangaListSortType.MangaTitle","title":"MangaTitle  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MangaTitle = 'manga_title'\n</code></pre> <p>Sorts the manga list in the ascending of the manga title.</p>"},{"location":"reference/enums/#aniwrap.enums.MangaRankingType","title":"MangaRankingType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the manga ranking type.</p> Source code in <code>aniwrap/enums/manga.py</code> <pre><code>class MangaRankingType(BaseEnum):\n\"\"\"Represents the manga ranking type.\"\"\"\nAll = \"all\"\n\"\"\"Represents top series - includes Manga, Novels, Manhwa etc.\"\"\"\nManga = \"manga\"\n\"\"\"Represents top manga series.\"\"\"\nNovels = \"novels\"\n\"\"\"Represents top novels.\"\"\"\nOneshots = \"oneshots\"\n\"\"\"Represents top one-shots.\"\"\"\nDoujin = \"doujin\"\n\"\"\"Represents top Doujinshi.\"\"\"\nManhwa = \"manhwa\"\n\"\"\"Represents top Manhwa.\"\"\"\nManhua = \"manhua\"\n\"\"\"Represents top Manhua.\"\"\"\nByPopularity = \"bypopularity\"\n\"\"\"Represents top series by popularity.\"\"\"\nFavorite = \"favorite\"\n\"\"\"Represents top favourited series.\"\"\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.All","title":"All  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>All = 'all'\n</code></pre> <p>Represents top series - includes Manga, Novels, Manhwa etc.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.ByPopularity","title":"ByPopularity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ByPopularity = 'bypopularity'\n</code></pre> <p>Represents top series by popularity.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.Doujin","title":"Doujin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Doujin = 'doujin'\n</code></pre> <p>Represents top Doujinshi.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.Favorite","title":"Favorite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Favorite = 'favorite'\n</code></pre> <p>Represents top favourited series.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.Manga","title":"Manga  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Manga = 'manga'\n</code></pre> <p>Represents top manga series.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.Manhua","title":"Manhua  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Manhua = 'manhua'\n</code></pre> <p>Represents top Manhua.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.Manhwa","title":"Manhwa  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Manhwa = 'manhwa'\n</code></pre> <p>Represents top Manhwa.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.Novels","title":"Novels  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Novels = 'novels'\n</code></pre> <p>Represents top novels.</p>"},{"location":"reference/enums/#aniwrap.enums.manga.MangaRankingType.Oneshots","title":"Oneshots  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Oneshots = 'oneshots'\n</code></pre> <p>Represents top one-shots.</p>"},{"location":"reference/enums/#aniwrap.enums.MangaReadStatus","title":"MangaReadStatus","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents the status of the manga in user's list.</p> Source code in <code>aniwrap/enums/user.py</code> <pre><code>class MangaReadStatus(BaseEnum):\n\"\"\"Represents the status of the manga in user's list.\"\"\"\nReading = \"reading\"\nCompleted = \"completed\"\nOnHold = \"on_hold\"\nDropped = \"dropped\"\nPlanToRead = \"plan_to_read\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.MangaStatus","title":"MangaStatus","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents Manga status enum.</p> Source code in <code>aniwrap/enums/manga.py</code> <pre><code>class MangaStatus(BaseEnum):\n\"\"\"Represents Manga status enum.\"\"\"\nFinished = \"finished\"\nNotPublished = \"not_yet_published\"\nPublishing = \"currently_publishing\"\nOnHiatus = \"on_hiatus\"\nDiscontinued = \"discontinued\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.MangaType","title":"MangaType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents Manga type enum.</p> Source code in <code>aniwrap/enums/manga.py</code> <pre><code>class MangaType(BaseEnum):\n\"\"\"Represents Manga type enum.\"\"\"\nDoujinshi = \"doujinshi\"\nLightNovel = \"light_novel\"\nManga = \"manga\"\nManhua = \"manhua\"\nManhwa = \"manhwa\"\nNovel = \"novel\"\nOel = \"oel\"\nOneShot = \"one_shot\"\nUnknown = \"unknown\"\n</code></pre>"},{"location":"reference/enums/#aniwrap.enums.NSFWLevel","title":"NSFWLevel","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents different NSFW levels.</p> Source code in <code>aniwrap/enums/common.py</code> <pre><code>class NSFWLevel(BaseEnum):\n\"\"\"Represents different NSFW levels.\"\"\"\nBlack = \"black\"\nGray = \"gray\"\nWhite = \"white\"\n</code></pre>"},{"location":"reference/models/","title":"models","text":"<p>Module for all models used in the project.</p>"},{"location":"reference/models/#aniwrap.models.Anime","title":"Anime","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a model for all the fields that an anime can contain.</p> Source code in <code>aniwrap/models/anime.py</code> <pre><code>@attrs.define(init=False)\nclass Anime(BaseModel):\n\"\"\"Represents a model for all the fields that an anime can contain.\"\"\"\nid: int\n\"\"\"The id of the anime.\"\"\"\ntitle: str\n\"\"\"The title of the anime.\"\"\"\nmain_picture: PictureModel\n\"\"\"The urls for medium and large sized pictures of the posters.\"\"\"\nalternative_titles: TitlesModel\n\"\"\"The Alternative titles for the anime.\"\"\"\nstart_date: datetime\n\"\"\"The anime's airing start date. For anime that are not aired, the date might be defaulted to first of the month.\"\"\"\nsynopsis: str\n\"\"\"The synopsis of the anime.\"\"\"\npopularity: int\n\"\"\"The popularity ranking of the anime.\"\"\"\nnsfw: NSFWLevel\n\"\"\"The nsfw level of the anime.\"\"\"\ncreated_at: datetime\n\"\"\"The date on which the anime is added on MAL.\"\"\"\nupdated_at: datetime\n\"\"\"The last updated date of the anime.\"\"\"\nmedia_type: AnimeType\n\"\"\"The type of the anime.\"\"\"\nstatus: AnimeStatus\n\"\"\"The status of the anime.\"\"\"\ngenres: list[CommonModel]\n\"\"\"The list of genres.\"\"\"\nsource: str\n\"\"\"The source of the anime.\"\"\"\nrating: str\n\"\"\"The rating of the anime (R-rated, PG etc.).\"\"\"\nstudios: list[CommonModel] | None = attrs.field(default=None)\n\"\"\"The studios that produced the anime. Defaults to `None` if information is not available.\"\"\"\nend_date: datetime | None = attrs.field(default=None)\n\"\"\"The anime's airing end date. Defaults to `None` if the anime is not aired yet.\"\"\"\nmean: float | None = attrs.field(default=None)\n\"\"\"The score of the anime on MAL. Defaults to `None` for anime that are not aired yet.\"\"\"\nrank: int | None = attrs.field(default=None)\n\"\"\"The rank of the anime on MAL. Defaults to `None` if information is not available.\"\"\"\nnum_list_users: int | None = attrs.field(default=None)\n\"\"\"The number of users that added the anime to their lists. Defaults to `None` if information is not available.\"\"\"\nnum_scoring_users: int | None = attrs.field(default=None)\n\"\"\"The number of users that scored the anime. Defaults to `None` if information is not available.\"\"\"\nnum_episodes: int = attrs.field(default=0)\n\"\"\"The number of episodes in the anime. Defaults to `0` if not aired or no information is available.\"\"\"\nstart_season: Season | None = attrs.field(default=None)\n\"\"\"The season in which the anime started airing. Defaults to `None` if not aired or information is not available.\"\"\"\nbroadcast: Broadcast | None = attrs.field(default=None)\n\"\"\"The broadcast day and time details. Defaults to `None` if not aired or information is not available.\"\"\"\naverage_episode_duration: int = attrs.field(default=0)\n\"\"\"The average episode duration of the anime represented in seconds. Defaults to `0` if not aired or information is not available.\"\"\"\npictures: list[OptionalPictureModel] | None = attrs.field(default=None)\n\"\"\"The list of urls for medium and large sized images related to the anime. Defaults to `None` if information is not available.\"\"\"\nbackground: str | None = attrs.field(default=None)\n\"\"\"Some extra information related to the anime. Defaults to `None` if information is not available.\"\"\"\nrelated_anime: list[RelatedMaterialModel] | None = attrs.field(default=None)\n\"\"\"The other anime that are related to the current anime. Defaults to `None` if information is not available.\"\"\"\n# related_manga - not implemented\nrecommendations: list[RecommendationModel] | None = attrs.field(default=None)\n\"\"\"The recommended anime by other users.  Defaults to `None` if information is not available.\"\"\"\nstatistics: AnimeStatistics | None = attrs.field(default=None)\n\"\"\"Represents different statistics related to the anime.  Defaults to `None` if information is not available.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.anime.Anime.alternative_titles","title":"alternative_titles  <code>instance-attribute</code>","text":"<pre><code>alternative_titles: TitlesModel\n</code></pre> <p>The Alternative titles for the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.average_episode_duration","title":"average_episode_duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>average_episode_duration: int = attrs.field(default=0)\n</code></pre> <p>The average episode duration of the anime represented in seconds. Defaults to <code>0</code> if not aired or information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background: str | None = attrs.field(default=None)\n</code></pre> <p>Some extra information related to the anime. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.broadcast","title":"broadcast  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>broadcast: Broadcast | None = attrs.field(default=None)\n</code></pre> <p>The broadcast day and time details. Defaults to <code>None</code> if not aired or information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date on which the anime is added on MAL.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.end_date","title":"end_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_date: datetime | None = attrs.field(default=None)\n</code></pre> <p>The anime's airing end date. Defaults to <code>None</code> if the anime is not aired yet.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.genres","title":"genres  <code>instance-attribute</code>","text":"<pre><code>genres: list[CommonModel]\n</code></pre> <p>The list of genres.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The id of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.main_picture","title":"main_picture  <code>instance-attribute</code>","text":"<pre><code>main_picture: PictureModel\n</code></pre> <p>The urls for medium and large sized pictures of the posters.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.mean","title":"mean  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mean: float | None = attrs.field(default=None)\n</code></pre> <p>The score of the anime on MAL. Defaults to <code>None</code> for anime that are not aired yet.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type: AnimeType\n</code></pre> <p>The type of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.nsfw","title":"nsfw  <code>instance-attribute</code>","text":"<pre><code>nsfw: NSFWLevel\n</code></pre> <p>The nsfw level of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.num_episodes","title":"num_episodes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_episodes: int = attrs.field(default=0)\n</code></pre> <p>The number of episodes in the anime. Defaults to <code>0</code> if not aired or no information is available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.num_list_users","title":"num_list_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_list_users: int | None = attrs.field(default=None)\n</code></pre> <p>The number of users that added the anime to their lists. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.num_scoring_users","title":"num_scoring_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_scoring_users: int | None = attrs.field(default=None)\n</code></pre> <p>The number of users that scored the anime. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.pictures","title":"pictures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pictures: list[OptionalPictureModel] | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>The list of urls for medium and large sized images related to the anime. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.popularity","title":"popularity  <code>instance-attribute</code>","text":"<pre><code>popularity: int\n</code></pre> <p>The popularity ranking of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.rank","title":"rank  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rank: int | None = attrs.field(default=None)\n</code></pre> <p>The rank of the anime on MAL. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.rating","title":"rating  <code>instance-attribute</code>","text":"<pre><code>rating: str\n</code></pre> <p>The rating of the anime (R-rated, PG etc.).</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.recommendations","title":"recommendations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recommendations: list[\nRecommendationModel\n] | None = attrs.field(default=None)\n</code></pre> <p>The recommended anime by other users.  Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.related_anime","title":"related_anime  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>related_anime: list[\nRelatedMaterialModel\n] | None = attrs.field(default=None)\n</code></pre> <p>The other anime that are related to the current anime. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: str\n</code></pre> <p>The source of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.start_date","title":"start_date  <code>instance-attribute</code>","text":"<pre><code>start_date: datetime\n</code></pre> <p>The anime's airing start date. For anime that are not aired, the date might be defaulted to first of the month.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.start_season","title":"start_season  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_season: Season | None = attrs.field(default=None)\n</code></pre> <p>The season in which the anime started airing. Defaults to <code>None</code> if not aired or information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.statistics","title":"statistics  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>statistics: AnimeStatistics | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>Represents different statistics related to the anime.  Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: AnimeStatus\n</code></pre> <p>The status of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.studios","title":"studios  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>studios: list[CommonModel] | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>The studios that produced the anime. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.synopsis","title":"synopsis  <code>instance-attribute</code>","text":"<pre><code>synopsis: str\n</code></pre> <p>The synopsis of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.Anime.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The last updated date of the anime.</p>"},{"location":"reference/models/#aniwrap.models.AnimeList","title":"AnimeList","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the user anime list model.</p> Source code in <code>aniwrap/models/user.py</code> <pre><code>@attrs.define\nclass AnimeList(BaseModel):\n\"\"\"Represents the user anime list model.\"\"\"\nanime_data: Anime\n\"\"\"Represents the anime details.\"\"\"\nlist_status: AnimeListStatus\n\"\"\"The status details of the anime in the list.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.user.AnimeList.anime_data","title":"anime_data  <code>instance-attribute</code>","text":"<pre><code>anime_data: Anime\n</code></pre> <p>Represents the anime details.</p>"},{"location":"reference/models/#aniwrap.models.user.AnimeList.list_status","title":"list_status  <code>instance-attribute</code>","text":"<pre><code>list_status: AnimeListStatus\n</code></pre> <p>The status details of the anime in the list.</p>"},{"location":"reference/models/#aniwrap.models.AnimeListStatus","title":"AnimeListStatus","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the anime list status model.</p> Source code in <code>aniwrap/models/user.py</code> <pre><code>@attrs.define(init=False)\nclass AnimeListStatus(BaseModel):\n\"\"\"Represents the anime list status model.\"\"\"\nstatus: AnimeWatchStatus\n\"\"\"The anime watch status in the anime list.\"\"\"\nupdated_at: datetime\n\"\"\"The last updated time.\"\"\"\nscore: int = 0\n\"\"\"The score of the anime in the list. Defaults to `0`\"\"\"\nnum_episodes_watched: int = 0\n\"\"\"The number of episodes watched. Defaults to `0`\"\"\"\nis_rewatching: bool = False\n\"\"\"Rewatch status. Defaults to `False`\"\"\"\nstart_date: datetime | None = attrs.field(default=None)\n\"\"\"The date on which the user started watching the anime.\"\"\"\nfinish_date: datetime | None = attrs.field(default=None)\n\"\"\"The date on which the user finished watching the anime.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.user.AnimeListStatus.finish_date","title":"finish_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>finish_date: datetime | None = attrs.field(default=None)\n</code></pre> <p>The date on which the user finished watching the anime.</p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListStatus.is_rewatching","title":"is_rewatching  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_rewatching: bool = False\n</code></pre> <p>Rewatch status. Defaults to <code>False</code></p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListStatus.num_episodes_watched","title":"num_episodes_watched  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_episodes_watched: int = 0\n</code></pre> <p>The number of episodes watched. Defaults to <code>0</code></p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListStatus.score","title":"score  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>score: int = 0\n</code></pre> <p>The score of the anime in the list. Defaults to <code>0</code></p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListStatus.start_date","title":"start_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_date: datetime | None = attrs.field(default=None)\n</code></pre> <p>The date on which the user started watching the anime.</p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListStatus.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: AnimeWatchStatus\n</code></pre> <p>The anime watch status in the anime list.</p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListStatus.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The last updated time.</p>"},{"location":"reference/models/#aniwrap.models.AnimeListUpdate","title":"AnimeListUpdate","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents different params present in anime list update.</p> Source code in <code>aniwrap/models/user.py</code> <pre><code>@attrs.define(init=False)\nclass AnimeListUpdate(BaseModel):\n\"\"\"Represents different params present in anime list update.\"\"\"\nstatus: AnimeWatchStatus\n\"\"\"The anime watch status in the anime list.\"\"\"\nupdated_at: datetime\n\"\"\"The last updated time.\"\"\"\nscore: int = 0\n\"\"\"The score of the anime in the list. Defaults to `0`\"\"\"\nnum_episodes_watched: int = 0\n\"\"\"The number of episodes watched. Defaults to `0`\"\"\"\nis_rewatching: bool = False\n\"\"\"Rewatch status. Defaults to `False`\"\"\"\npriority: ListPriority = ListPriority.Low\n\"\"\"The anime priority.\"\"\"\nnum_times_rewatched: int = 0\n\"\"\"The number of times anime is rewatched.\"\"\"\nrewatch_value: AnimeRewatchValue | None = None\ntags: list[str] | None = None\ncomments: str | None = None\n</code></pre>"},{"location":"reference/models/#aniwrap.models.user.AnimeListUpdate.is_rewatching","title":"is_rewatching  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_rewatching: bool = False\n</code></pre> <p>Rewatch status. Defaults to <code>False</code></p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListUpdate.num_episodes_watched","title":"num_episodes_watched  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_episodes_watched: int = 0\n</code></pre> <p>The number of episodes watched. Defaults to <code>0</code></p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListUpdate.num_times_rewatched","title":"num_times_rewatched  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_times_rewatched: int = 0\n</code></pre> <p>The number of times anime is rewatched.</p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListUpdate.priority","title":"priority  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>priority: ListPriority = ListPriority.Low\n</code></pre> <p>The anime priority.</p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListUpdate.score","title":"score  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>score: int = 0\n</code></pre> <p>The score of the anime in the list. Defaults to <code>0</code></p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListUpdate.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: AnimeWatchStatus\n</code></pre> <p>The anime watch status in the anime list.</p>"},{"location":"reference/models/#aniwrap.models.user.AnimeListUpdate.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The last updated time.</p>"},{"location":"reference/models/#aniwrap.models.AnimeRanking","title":"AnimeRanking","text":"<p>Represents all the fields that contain in Anime Ranking result.</p> Source code in <code>aniwrap/models/anime.py</code> <pre><code>@attrs.define\nclass AnimeRanking:\n\"\"\"Represents all the fields that contain in Anime Ranking result.\"\"\"\nanime_data: Anime\n\"\"\"Represents all the anime details.\"\"\"\nranking: RankingModel\n\"\"\"Represents the ranking of the anime in the list.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.anime.AnimeRanking.anime_data","title":"anime_data  <code>instance-attribute</code>","text":"<pre><code>anime_data: Anime\n</code></pre> <p>Represents all the anime details.</p>"},{"location":"reference/models/#aniwrap.models.anime.AnimeRanking.ranking","title":"ranking  <code>instance-attribute</code>","text":"<pre><code>ranking: RankingModel\n</code></pre> <p>Represents the ranking of the anime in the list.</p>"},{"location":"reference/models/#aniwrap.models.AnimeStatistics","title":"AnimeStatistics","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the model for statistics of the anime.</p> Source code in <code>aniwrap/models/anime.py</code> <pre><code>@attrs.define\nclass AnimeStatistics(BaseModel):\n\"\"\"Represents the model for statistics of the anime.\"\"\"\nstatus: AnimeStatisticsStatus | None = attrs.field(default=None)\n\"\"\"Represnts different statistics of the anime.\"\"\"\nnum_list_users: int | None = attrs.field(default=None)\n\"\"\"The total number of users that added this anime to their lists.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.anime.AnimeStatistics.num_list_users","title":"num_list_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_list_users: int | None = attrs.field(default=None)\n</code></pre> <p>The total number of users that added this anime to their lists.</p>"},{"location":"reference/models/#aniwrap.models.anime.AnimeStatistics.status","title":"status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>status: AnimeStatisticsStatus | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>Represnts different statistics of the anime.</p>"},{"location":"reference/models/#aniwrap.models.AnimeStatisticsStatus","title":"AnimeStatisticsStatus","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the model for anime statistics.</p> Source code in <code>aniwrap/models/anime.py</code> <pre><code>@attrs.define\nclass AnimeStatisticsStatus(BaseModel):\n\"\"\"Represents the model for anime statistics.\"\"\"\nwatching: str | None = attrs.field(default=None)\n\"\"\"The number of users that are currently watching the anime.\"\"\"\ncompleted: str | None = attrs.field(default=None)\n\"\"\"The number of users that completed the anime.\"\"\"\non_hold: str | None = attrs.field(default=None)\n\"\"\"The number of users that put the anime on hold.\"\"\"\ndropped: str | None = attrs.field(default=None)\n\"\"\"The number of users that dropped the anime.\"\"\"\nplan_to_watch: str | None = attrs.field(default=None)\n\"\"\"The number of users that are planning to watch the anime.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.anime.AnimeStatisticsStatus.completed","title":"completed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>completed: str | None = attrs.field(default=None)\n</code></pre> <p>The number of users that completed the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.AnimeStatisticsStatus.dropped","title":"dropped  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dropped: str | None = attrs.field(default=None)\n</code></pre> <p>The number of users that dropped the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.AnimeStatisticsStatus.on_hold","title":"on_hold  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>on_hold: str | None = attrs.field(default=None)\n</code></pre> <p>The number of users that put the anime on hold.</p>"},{"location":"reference/models/#aniwrap.models.anime.AnimeStatisticsStatus.plan_to_watch","title":"plan_to_watch  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plan_to_watch: str | None = attrs.field(default=None)\n</code></pre> <p>The number of users that are planning to watch the anime.</p>"},{"location":"reference/models/#aniwrap.models.anime.AnimeStatisticsStatus.watching","title":"watching  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>watching: str | None = attrs.field(default=None)\n</code></pre> <p>The number of users that are currently watching the anime.</p>"},{"location":"reference/models/#aniwrap.models.Author","title":"Author","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the author model.</p> Source code in <code>aniwrap/models/manga.py</code> <pre><code>@attrs.define\nclass Author(BaseModel):\n\"\"\"Represents the author model.\"\"\"\nnode: AuthorName\n\"\"\"Represents author details.\"\"\"\nrole: str | None = attrs.field(default=None)\n\"\"\"The role of the author (Story, art etc.).\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.manga.Author.node","title":"node  <code>instance-attribute</code>","text":"<pre><code>node: AuthorName\n</code></pre> <p>Represents author details.</p>"},{"location":"reference/models/#aniwrap.models.manga.Author.role","title":"role  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>role: str | None = attrs.field(default=None)\n</code></pre> <p>The role of the author (Story, art etc.).</p>"},{"location":"reference/models/#aniwrap.models.AuthorName","title":"AuthorName","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the author name model.</p> Source code in <code>aniwrap/models/manga.py</code> <pre><code>@attrs.define\nclass AuthorName(BaseModel):\n\"\"\"Represents the author name model.\"\"\"\nid: int\n\"\"\"The id related to the author.\"\"\"\nfirst_name: str\n\"\"\"The first name of the author.\"\"\"\nlast_name: str\n\"\"\"The last name of the author.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.manga.AuthorName.first_name","title":"first_name  <code>instance-attribute</code>","text":"<pre><code>first_name: str\n</code></pre> <p>The first name of the author.</p>"},{"location":"reference/models/#aniwrap.models.manga.AuthorName.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The id related to the author.</p>"},{"location":"reference/models/#aniwrap.models.manga.AuthorName.last_name","title":"last_name  <code>instance-attribute</code>","text":"<pre><code>last_name: str\n</code></pre> <p>The last name of the author.</p>"},{"location":"reference/models/#aniwrap.models.BaseModel","title":"BaseModel","text":"<p>The base model from which all the other models inherit from.</p> Source code in <code>aniwrap/models/base.py</code> <pre><code>@attrs.define\nclass BaseModel:\n\"\"\"The base model from which all the other models inherit from.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.Broadcast","title":"Broadcast","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the model for broadcast details.</p> Source code in <code>aniwrap/models/anime.py</code> <pre><code>@attrs.define\nclass Broadcast(BaseModel):\n\"\"\"Represents the model for broadcast details.\"\"\"\nday_of_the_week: str\n\"\"\"The day on which the anime airs.\"\"\"\nstart_time: time.struct_time\n\"\"\"The time at which the anime airs.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.anime.Broadcast.day_of_the_week","title":"day_of_the_week  <code>instance-attribute</code>","text":"<pre><code>day_of_the_week: str\n</code></pre> <p>The day on which the anime airs.</p>"},{"location":"reference/models/#aniwrap.models.anime.Broadcast.start_time","title":"start_time  <code>instance-attribute</code>","text":"<pre><code>start_time: time.struct_time\n</code></pre> <p>The time at which the anime airs.</p>"},{"location":"reference/models/#aniwrap.models.CommonModel","title":"CommonModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a common model - contains <code>id</code> and <code>name</code>.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define\nclass CommonModel(BaseModel):\n\"\"\"Represents a common model - contains `id` and `name`.\"\"\"\nid: int\n\"\"\"The id.\"\"\"\nname: str\n\"\"\"The name.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.CommonModel.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The id.</p>"},{"location":"reference/models/#aniwrap.models.common.CommonModel.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name.</p>"},{"location":"reference/models/#aniwrap.models.Forum","title":"Forum","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents all fields a forum can contain.</p> Source code in <code>aniwrap/models/forum.py</code> <pre><code>@attrs.define(init=False)\nclass Forum(BaseModel):\n\"\"\"Represents all fields a forum can contain.\"\"\"\ntitle: str\n\"\"\"The title of the forum.\"\"\"\nboards: list[ForumBoard]\n\"\"\"The list of boards in the forum\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.forum.Forum.boards","title":"boards  <code>instance-attribute</code>","text":"<pre><code>boards: list[ForumBoard]\n</code></pre> <p>The list of boards in the forum</p>"},{"location":"reference/models/#aniwrap.models.forum.Forum.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the forum.</p>"},{"location":"reference/models/#aniwrap.models.ForumBoard","title":"ForumBoard","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represnts a forum board model.</p> Source code in <code>aniwrap/models/forum.py</code> <pre><code>@attrs.define(init=False)\nclass ForumBoard(BaseModel):\n\"\"\"Represnts a forum board model.\"\"\"\nid: int\n\"\"\"The id of the forum board.\"\"\"\ntitle: str\n\"\"\"The title of the forum board.\"\"\"\ndescription: str | None = attrs.field(default=None)\n\"\"\"The description of the board.\"\"\"\nsubboards: list[ForumSubBoard] | None = attrs.field(default=None)\n\"\"\"The list of sub boards.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.forum.ForumBoard.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: str | None = attrs.field(default=None)\n</code></pre> <p>The description of the board.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumBoard.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The id of the forum board.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumBoard.subboards","title":"subboards  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>subboards: list[ForumSubBoard] | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>The list of sub boards.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumBoard.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the forum board.</p>"},{"location":"reference/models/#aniwrap.models.ForumPost","title":"ForumPost","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a forum post model.</p> Source code in <code>aniwrap/models/forum.py</code> <pre><code>@attrs.define(init=False)\nclass ForumPost(BaseModel):\n\"\"\"Represents a forum post model.\"\"\"\nid: int\n\"\"\"The Id of the fourm post.\"\"\"\nnumber: int\n\"\"\"The number(sequence?) of this particular post.\"\"\"\ncreated_at: datetime\n\"\"\"The data on which the post was created.\"\"\"\ncreated_by: PostCreator\n\"\"\"The details of the post's author.\"\"\"\nbody: str\n\"\"\"The content of the post.\"\"\"\nsignature: str | None = attrs.field(default=None)\n\"\"\"The signature on the post.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.forum.ForumPost.body","title":"body  <code>instance-attribute</code>","text":"<pre><code>body: str\n</code></pre> <p>The content of the post.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumPost.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The data on which the post was created.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumPost.created_by","title":"created_by  <code>instance-attribute</code>","text":"<pre><code>created_by: PostCreator\n</code></pre> <p>The details of the post's author.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumPost.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The Id of the fourm post.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumPost.number","title":"number  <code>instance-attribute</code>","text":"<pre><code>number: int\n</code></pre> <p>The number(sequence?) of this particular post.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumPost.signature","title":"signature  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>signature: str | None = attrs.field(default=None)\n</code></pre> <p>The signature on the post.</p>"},{"location":"reference/models/#aniwrap.models.ForumSubBoard","title":"ForumSubBoard","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a forum subboard model.</p> Source code in <code>aniwrap/models/forum.py</code> <pre><code>@attrs.define\nclass ForumSubBoard(BaseModel):\n\"\"\"Represents a forum subboard model.\"\"\"\nid: int\n\"\"\"The id of the sub board.\"\"\"\ntitle: str\n\"\"\"The title of the sub board.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.forum.ForumSubBoard.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The id of the sub board.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumSubBoard.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the sub board.</p>"},{"location":"reference/models/#aniwrap.models.ForumTopic","title":"ForumTopic","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents all fields a forum topic can contain.</p> Source code in <code>aniwrap/models/forum.py</code> <pre><code>@attrs.define(init=False)\nclass ForumTopic(BaseModel):\n\"\"\"Represents all fields a forum topic can contain.\"\"\"\nid: int\n\"\"\"The id of the topic.\"\"\"\ntitle: str\n\"\"\"The title of the topic.\"\"\"\ncreated_at: datetime\n\"\"\"The date at which the topic was created.\"\"\"\nnumber_of_posts: int\n\"\"\"The total number of posts under the topic.\"\"\"\nlast_post_created_at: datetime\n\"\"\"The date of the latest post under the topic.\"\"\"\nis_locked: bool\n\"\"\"Whether the topic is locked.\"\"\"\ncreated_by: CommonModel\n\"\"\"The details of the user that created the topic.\"\"\"\nlast_post_created_by: CommonModel\n\"\"\"The details of the user that created the last post under the topic.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date at which the topic was created.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.created_by","title":"created_by  <code>instance-attribute</code>","text":"<pre><code>created_by: CommonModel\n</code></pre> <p>The details of the user that created the topic.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The id of the topic.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.is_locked","title":"is_locked  <code>instance-attribute</code>","text":"<pre><code>is_locked: bool\n</code></pre> <p>Whether the topic is locked.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.last_post_created_at","title":"last_post_created_at  <code>instance-attribute</code>","text":"<pre><code>last_post_created_at: datetime\n</code></pre> <p>The date of the latest post under the topic.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.last_post_created_by","title":"last_post_created_by  <code>instance-attribute</code>","text":"<pre><code>last_post_created_by: CommonModel\n</code></pre> <p>The details of the user that created the last post under the topic.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.number_of_posts","title":"number_of_posts  <code>instance-attribute</code>","text":"<pre><code>number_of_posts: int\n</code></pre> <p>The total number of posts under the topic.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopic.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the topic.</p>"},{"location":"reference/models/#aniwrap.models.ForumTopicDetails","title":"ForumTopicDetails","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the forum topic details model.</p> Source code in <code>aniwrap/models/forum.py</code> <pre><code>@attrs.define(init=False)\nclass ForumTopicDetails(BaseModel):\n\"\"\"Represents the forum topic details model.\"\"\"\ntitle: str\n\"\"\"The title of the forum.\"\"\"\nposts: list[ForumPost] | None = attrs.field(default=None)\n\"\"\"The list of posts in the forum.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopicDetails.posts","title":"posts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>posts: list[ForumPost] | None = attrs.field(default=None)\n</code></pre> <p>The list of posts in the forum.</p>"},{"location":"reference/models/#aniwrap.models.forum.ForumTopicDetails.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the forum.</p>"},{"location":"reference/models/#aniwrap.models.GenerateRoute","title":"GenerateRoute","text":"Source code in <code>aniwrap/models/route.py</code> <pre><code>class GenerateRoute:\n__slots__ = (\"_route\", \"_params\", \"_data\")\ndef __init__(self, route: Route) -&gt; None:\nself._route = route\nself._params: dict[str, str | int] = {}\nself._data: dict[str, str | int] = {}\n@property\ndef route(self) -&gt; Route:\n\"\"\"The route itself.\"\"\"\nreturn self._route\n@property\ndef uri(self) -&gt; str:\n\"\"\"The routes uri endpoint.\"\"\"\nreturn self.route.uri\n@uri.setter\ndef uri(self, val: str) -&gt; str:\n\"\"\"Set the uri.\"\"\"\nself.route.uri = val\n@property\ndef method(self) -&gt; str:\n\"\"\"The routes method, i.e. GET, POST...\"\"\"\nreturn self.route.method\n@property\ndef params(self) -&gt; dict[str, str | int]:\n\"\"\"The query params for the route.\"\"\"\nreturn self._params\n@property\ndef data(self) -&gt; dict[str, str | int]:\n\"\"\"The input data that needs to be passed.\"\"\"\nreturn self._data\ndef with_params(self, params: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds additional query params to this generated route.\"\"\"\nif params:\nself.params.update(params)\nreturn self\ndef with_data(self, data: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds input data to the generated route.\"\"\"\nif data:\nself._data.update(data)\nreturn self\n</code></pre>"},{"location":"reference/models/#aniwrap.models.route.GenerateRoute.data","title":"data  <code>property</code>","text":"<pre><code>data: dict[str, str | int]\n</code></pre> <p>The input data that needs to be passed.</p>"},{"location":"reference/models/#aniwrap.models.route.GenerateRoute.method","title":"method  <code>property</code>","text":"<pre><code>method: str\n</code></pre> <p>The routes method, i.e. GET, POST...</p>"},{"location":"reference/models/#aniwrap.models.route.GenerateRoute.params","title":"params  <code>property</code>","text":"<pre><code>params: dict[str, str | int]\n</code></pre> <p>The query params for the route.</p>"},{"location":"reference/models/#aniwrap.models.route.GenerateRoute.route","title":"route  <code>property</code>","text":"<pre><code>route: Route\n</code></pre> <p>The route itself.</p>"},{"location":"reference/models/#aniwrap.models.route.GenerateRoute.uri","title":"uri  <code>property</code> <code>writable</code>","text":"<pre><code>uri: str\n</code></pre> <p>The routes uri endpoint.</p>"},{"location":"reference/models/#aniwrap.models.route.GenerateRoute.with_data","title":"with_data","text":"<pre><code>with_data(data: dict[str, Any]) -&gt; GenerateRoute\n</code></pre> <p>Adds input data to the generated route.</p> Source code in <code>aniwrap/models/route.py</code> <pre><code>def with_data(self, data: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds input data to the generated route.\"\"\"\nif data:\nself._data.update(data)\nreturn self\n</code></pre>"},{"location":"reference/models/#aniwrap.models.route.GenerateRoute.with_params","title":"with_params","text":"<pre><code>with_params(params: dict[str, Any]) -&gt; GenerateRoute\n</code></pre> <p>Adds additional query params to this generated route.</p> Source code in <code>aniwrap/models/route.py</code> <pre><code>def with_params(self, params: dict[str, Any]) -&gt; GenerateRoute:\n\"\"\"Adds additional query params to this generated route.\"\"\"\nif params:\nself.params.update(params)\nreturn self\n</code></pre>"},{"location":"reference/models/#aniwrap.models.HttpErrorResponse","title":"HttpErrorResponse","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents HTTP success response.</p> Source code in <code>aniwrap/models/http.py</code> <pre><code>@attrs.define\nclass HttpErrorResponse(BaseModel):\n\"\"\"Represents HTTP success response.\"\"\"\nstatus: int\n\"\"\"The HTTP status code.\"\"\"\nmessage: str\n\"\"\"The error message.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.http.HttpErrorResponse.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The error message.</p>"},{"location":"reference/models/#aniwrap.models.http.HttpErrorResponse.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code.</p>"},{"location":"reference/models/#aniwrap.models.HttpSuccessResponse","title":"HttpSuccessResponse","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents HTTP success response.</p> Source code in <code>aniwrap/models/http.py</code> <pre><code>@attrs.define\nclass HttpSuccessResponse(BaseModel):\n\"\"\"Represents HTTP success response.\"\"\"\nstatus: int\n\"\"\"The HTTP status code.\"\"\"\nmessage: str\n\"\"\"The success message.\"\"\"\ndata: Any\n\"\"\"The API json response.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.http.HttpSuccessResponse.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: Any\n</code></pre> <p>The API json response.</p>"},{"location":"reference/models/#aniwrap.models.http.HttpSuccessResponse.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The success message.</p>"},{"location":"reference/models/#aniwrap.models.http.HttpSuccessResponse.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code.</p>"},{"location":"reference/models/#aniwrap.models.Manga","title":"Manga","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents model for all the fields a manga can contain.</p> Source code in <code>aniwrap/models/manga.py</code> <pre><code>@attrs.define(init=False)\nclass Manga(BaseModel):\n\"\"\"Represents model for all the fields a manga can contain.\"\"\"\nid: int\n\"\"\"The id of the Manga.\"\"\"\ntitle: str\n\"\"\"The title of the Manga.\"\"\"\nmain_picture: PictureModel\n\"\"\"The urls for medium and large sized images of the posters.\"\"\"\nalternative_titles: TitlesModel\n\"\"\"The Alternative titles for the Manga. Contains synonyms, Japanese title and any other English title.\"\"\"\nstart_date: datetime\n\"\"\"The start date of the Manga publication.\"\"\"\npopularity: int\n\"\"\"The popularity of the Manga.\"\"\"\nnsfw: NSFWLevel\n\"\"\"The NSFW level.\"\"\"\ncreated_at: datetime\n\"\"\"The date on which the manga was created on MAL.\"\"\"\nupdated_at: datetime\n\"\"\"The date on which the manga was last updated on MAL.\"\"\"\nmedia_type: MangaType\n\"\"\"The type of the Manga.\"\"\"\nstatus: MangaStatus\n\"\"\"The status of the Manga.\"\"\"\ngenres: list[CommonModel]\n\"\"\"The list of genres to which the manga belongs to.\"\"\"\nnum_volumes: int\n\"\"\"The number of volumes of the manga that are currently published.\"\"\"\nnum_chapters: int\n\"\"\"The total number of the chapters present in the Manga.\"\"\"\nauthors: list[Author]\n\"\"\"The details of the manga authors.\"\"\"\nend_date: datetime | None = attrs.field(default=None)\n\"\"\"The Manga end date.\"\"\"\nsynopsis: str | None = attrs.field(default=None)\n\"\"\"The synopsis of the Manga.\"\"\"\nmean: float | None = attrs.field(default=None)\n\"\"\"The score of the manga on MAL. Defaults to `None` for manga that are not published yet.\"\"\"\nrank: int | None = attrs.field(default=None)\n\"\"\"The rank of the Manga.\"\"\"\nnum_list_users: int | None = attrs.field(default=None)\n\"\"\"The number of users that added the manga to their lists.\"\"\"\nnum_scoring_users: int | None = attrs.field(default=None)\n\"\"\"The number of users that scored the manga.\"\"\"\nbackground: str | None = attrs.field(default=None)\n\"\"\"Some extra information related to the manga.\"\"\"\n# related_anime: list[RelatedAnimeType] | None = attrs.field(default=None)\n# \"\"\"The other anime that are related to the current anime.\"\"\"\npictures: list[OptionalPictureModel] | None = attrs.field(default=None)\n\"\"\"The list of urls for medium and large sized images related to the anime. Defaults to `None` if information is not available.\"\"\"\nrelated_manga: list[RelatedMaterialModel] | None = attrs.field(default=None)\n\"\"\"The other manga that are related to the current manga.\"\"\"\nrecommendations: list[RecommendationModel] | None = attrs.field(default=None)\n\"\"\"The recommended manga by other users.\"\"\"\nserialization: Serialization | None = attrs.field(default=None)\n</code></pre>"},{"location":"reference/models/#aniwrap.models.manga.Manga.alternative_titles","title":"alternative_titles  <code>instance-attribute</code>","text":"<pre><code>alternative_titles: TitlesModel\n</code></pre> <p>The Alternative titles for the Manga. Contains synonyms, Japanese title and any other English title.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.authors","title":"authors  <code>instance-attribute</code>","text":"<pre><code>authors: list[Author]\n</code></pre> <p>The details of the manga authors.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.background","title":"background  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>background: str | None = attrs.field(default=None)\n</code></pre> <p>Some extra information related to the manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date on which the manga was created on MAL.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.end_date","title":"end_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_date: datetime | None = attrs.field(default=None)\n</code></pre> <p>The Manga end date.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.genres","title":"genres  <code>instance-attribute</code>","text":"<pre><code>genres: list[CommonModel]\n</code></pre> <p>The list of genres to which the manga belongs to.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The id of the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.main_picture","title":"main_picture  <code>instance-attribute</code>","text":"<pre><code>main_picture: PictureModel\n</code></pre> <p>The urls for medium and large sized images of the posters.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.mean","title":"mean  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mean: float | None = attrs.field(default=None)\n</code></pre> <p>The score of the manga on MAL. Defaults to <code>None</code> for manga that are not published yet.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.media_type","title":"media_type  <code>instance-attribute</code>","text":"<pre><code>media_type: MangaType\n</code></pre> <p>The type of the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.nsfw","title":"nsfw  <code>instance-attribute</code>","text":"<pre><code>nsfw: NSFWLevel\n</code></pre> <p>The NSFW level.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.num_chapters","title":"num_chapters  <code>instance-attribute</code>","text":"<pre><code>num_chapters: int\n</code></pre> <p>The total number of the chapters present in the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.num_list_users","title":"num_list_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_list_users: int | None = attrs.field(default=None)\n</code></pre> <p>The number of users that added the manga to their lists.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.num_scoring_users","title":"num_scoring_users  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_scoring_users: int | None = attrs.field(default=None)\n</code></pre> <p>The number of users that scored the manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.num_volumes","title":"num_volumes  <code>instance-attribute</code>","text":"<pre><code>num_volumes: int\n</code></pre> <p>The number of volumes of the manga that are currently published.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.pictures","title":"pictures  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pictures: list[OptionalPictureModel] | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>The list of urls for medium and large sized images related to the anime. Defaults to <code>None</code> if information is not available.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.popularity","title":"popularity  <code>instance-attribute</code>","text":"<pre><code>popularity: int\n</code></pre> <p>The popularity of the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.rank","title":"rank  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rank: int | None = attrs.field(default=None)\n</code></pre> <p>The rank of the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.recommendations","title":"recommendations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>recommendations: list[\nRecommendationModel\n] | None = attrs.field(default=None)\n</code></pre> <p>The recommended manga by other users.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.related_manga","title":"related_manga  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>related_manga: list[\nRelatedMaterialModel\n] | None = attrs.field(default=None)\n</code></pre> <p>The other manga that are related to the current manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.start_date","title":"start_date  <code>instance-attribute</code>","text":"<pre><code>start_date: datetime\n</code></pre> <p>The start date of the Manga publication.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: MangaStatus\n</code></pre> <p>The status of the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.synopsis","title":"synopsis  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>synopsis: str | None = attrs.field(default=None)\n</code></pre> <p>The synopsis of the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the Manga.</p>"},{"location":"reference/models/#aniwrap.models.manga.Manga.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The date on which the manga was last updated on MAL.</p>"},{"location":"reference/models/#aniwrap.models.MangaList","title":"MangaList","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the user manga list model.</p> Source code in <code>aniwrap/models/user.py</code> <pre><code>@attrs.define\nclass MangaList(BaseModel):\n\"\"\"Represents the user manga list model.\"\"\"\nmanga: Manga\n\"\"\"Represents the manga details.\"\"\"\nlist_status: MangaListStatus\n\"\"\"The status details of the manga in the user list.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.user.MangaList.list_status","title":"list_status  <code>instance-attribute</code>","text":"<pre><code>list_status: MangaListStatus\n</code></pre> <p>The status details of the manga in the user list.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaList.manga","title":"manga  <code>instance-attribute</code>","text":"<pre><code>manga: Manga\n</code></pre> <p>Represents the manga details.</p>"},{"location":"reference/models/#aniwrap.models.MangaListStatus","title":"MangaListStatus","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the Manga list status model.</p> Source code in <code>aniwrap/models/user.py</code> <pre><code>@attrs.define(init=False)\nclass MangaListStatus(BaseModel):\n\"\"\"Represents the Manga list status model.\"\"\"\nstatus: MangaReadStatus\n\"\"\"The manga read status in the user list.\"\"\"\nupdated_at: datetime\n\"\"\"The last updated time.\"\"\"\nis_rereading: bool = False\n\"\"\"The rereading status.\"\"\"\nnum_volumes_read: int = 0\n\"\"\"The number of volumes read in the manga.\"\"\"\nnum_chapters_read: int = 0\n\"\"\"The number of chapters read in the manga.\"\"\"\nscore: int = 0\n\"\"\"The score of the manga.\"\"\"\nstart_date: datetime | None = attrs.field(default=None)\n\"\"\"The date on which the user started reading the manga.\"\"\"\nfinish_date: datetime | None = attrs.field(default=None)\n\"\"\"The date on which the user finished reading the manga.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.finish_date","title":"finish_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>finish_date: datetime | None = attrs.field(default=None)\n</code></pre> <p>The date on which the user finished reading the manga.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.is_rereading","title":"is_rereading  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_rereading: bool = False\n</code></pre> <p>The rereading status.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.num_chapters_read","title":"num_chapters_read  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_chapters_read: int = 0\n</code></pre> <p>The number of chapters read in the manga.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.num_volumes_read","title":"num_volumes_read  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_volumes_read: int = 0\n</code></pre> <p>The number of volumes read in the manga.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.score","title":"score  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>score: int = 0\n</code></pre> <p>The score of the manga.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.start_date","title":"start_date  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_date: datetime | None = attrs.field(default=None)\n</code></pre> <p>The date on which the user started reading the manga.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: MangaReadStatus\n</code></pre> <p>The manga read status in the user list.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListStatus.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The last updated time.</p>"},{"location":"reference/models/#aniwrap.models.MangaListUpdate","title":"MangaListUpdate","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents different params present in manga list update.</p> Source code in <code>aniwrap/models/user.py</code> <pre><code>@attrs.define(init=False)\nclass MangaListUpdate(BaseModel):\n\"\"\"Represents different params present in manga list update.\"\"\"\nstatus: MangaReadStatus\n\"\"\"The manga read status in the manga list.\"\"\"\nupdated_at: datetime\n\"\"\"The last updated time.\"\"\"\nscore: int = 0\n\"\"\"The score of the manga in the list. Defaults to `0`\"\"\"\nnum_volumes_read: int = 0\n\"\"\"The number of volumes read in the manga. Defaults to `0`\"\"\"\nnum_chapters_read: int = 0\n\"\"\"The number of chapters read in the manga. Defaults to `0`\"\"\"\npriority: ListPriority = ListPriority.Low\n\"\"\"The manga priority in the list.\"\"\"\nnum_times_reread: int = 0\n\"\"\"The manga reread times.\"\"\"\nis_rereading: bool = False\nreread_value: MangaRereadValue | None = None\ntags: list[str] | None = None\ncomments: str | None = None\n</code></pre>"},{"location":"reference/models/#aniwrap.models.user.MangaListUpdate.num_chapters_read","title":"num_chapters_read  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_chapters_read: int = 0\n</code></pre> <p>The number of chapters read in the manga. Defaults to <code>0</code></p>"},{"location":"reference/models/#aniwrap.models.user.MangaListUpdate.num_times_reread","title":"num_times_reread  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_times_reread: int = 0\n</code></pre> <p>The manga reread times.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListUpdate.num_volumes_read","title":"num_volumes_read  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_volumes_read: int = 0\n</code></pre> <p>The number of volumes read in the manga. Defaults to <code>0</code></p>"},{"location":"reference/models/#aniwrap.models.user.MangaListUpdate.priority","title":"priority  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>priority: ListPriority = ListPriority.Low\n</code></pre> <p>The manga priority in the list.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListUpdate.score","title":"score  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>score: int = 0\n</code></pre> <p>The score of the manga in the list. Defaults to <code>0</code></p>"},{"location":"reference/models/#aniwrap.models.user.MangaListUpdate.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: MangaReadStatus\n</code></pre> <p>The manga read status in the manga list.</p>"},{"location":"reference/models/#aniwrap.models.user.MangaListUpdate.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The last updated time.</p>"},{"location":"reference/models/#aniwrap.models.MangaRanking","title":"MangaRanking","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents all the fields that contain in Manga Ranking result.</p> Source code in <code>aniwrap/models/manga.py</code> <pre><code>@attrs.define\nclass MangaRanking(BaseModel):\n\"\"\"Represents all the fields that contain in Manga Ranking result.\"\"\"\nmanga_data: Manga\n\"\"\"Represents all the manga details.\"\"\"\nranking: RankingModel\n\"\"\"Represents the ranking of the manga in the list.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.manga.MangaRanking.manga_data","title":"manga_data  <code>instance-attribute</code>","text":"<pre><code>manga_data: Manga\n</code></pre> <p>Represents all the manga details.</p>"},{"location":"reference/models/#aniwrap.models.manga.MangaRanking.ranking","title":"ranking  <code>instance-attribute</code>","text":"<pre><code>ranking: RankingModel\n</code></pre> <p>Represents the ranking of the manga in the list.</p>"},{"location":"reference/models/#aniwrap.models.OptionalPictureModel","title":"OptionalPictureModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a model for the picture type fields.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define\nclass OptionalPictureModel(BaseModel):\n\"\"\"Represents a model for the picture type fields.\"\"\"\nmedium: str\n\"\"\"The url for the medium sized picture.\"\"\"\nlarge: str\n\"\"\"The url for the large sized picture\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.OptionalPictureModel.large","title":"large  <code>instance-attribute</code>","text":"<pre><code>large: str\n</code></pre> <p>The url for the large sized picture</p>"},{"location":"reference/models/#aniwrap.models.common.OptionalPictureModel.medium","title":"medium  <code>instance-attribute</code>","text":"<pre><code>medium: str\n</code></pre> <p>The url for the medium sized picture.</p>"},{"location":"reference/models/#aniwrap.models.PictureModel","title":"PictureModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the picture type fields model.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define(init=False)\nclass PictureModel(BaseModel):\n\"\"\"Represents the picture type fields model.\"\"\"\nmedium: str\n\"\"\"The url for the medium sized picture.\"\"\"\nlarge: str\n\"\"\"The url for the large sized picture\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.PictureModel.large","title":"large  <code>instance-attribute</code>","text":"<pre><code>large: str\n</code></pre> <p>The url for the large sized picture</p>"},{"location":"reference/models/#aniwrap.models.common.PictureModel.medium","title":"medium  <code>instance-attribute</code>","text":"<pre><code>medium: str\n</code></pre> <p>The url for the medium sized picture.</p>"},{"location":"reference/models/#aniwrap.models.PostCreator","title":"PostCreator","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents post creator model.</p> Source code in <code>aniwrap/models/forum.py</code> <pre><code>@attrs.define(init=False)\nclass PostCreator(BaseModel):\n\"\"\"Represents post creator model.\"\"\"\nid: int\n\"\"\"The Id of the post's author.\"\"\"\nname: str\n\"\"\"The name of the post's author.\"\"\"\nforum_avator: str | None = attrs.field(default=None)\n\"\"\"The url for the avatar of the post's author.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.forum.PostCreator.forum_avator","title":"forum_avator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>forum_avator: str | None = attrs.field(default=None)\n</code></pre> <p>The url for the avatar of the post's author.</p>"},{"location":"reference/models/#aniwrap.models.forum.PostCreator.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The Id of the post's author.</p>"},{"location":"reference/models/#aniwrap.models.forum.PostCreator.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the post's author.</p>"},{"location":"reference/models/#aniwrap.models.RankingModel","title":"RankingModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the ranking model.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define\nclass RankingModel(BaseModel):\n\"\"\"Represents the ranking model.\"\"\"\nrank: int\n\"\"\"Represents the rank of the anime in the list.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.RankingModel.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>Represents the rank of the anime in the list.</p>"},{"location":"reference/models/#aniwrap.models.RecommendationModel","title":"RecommendationModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the recommendation type model.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define\nclass RecommendationModel(BaseModel):\n\"\"\"Represents the recommendation type model.\"\"\"\nnode: dict[str, RelatedMaterialNodeModel] | None = attrs.field(default=None)\n\"\"\"Contains details of the recommended anime/manga.\"\"\"\nnum_recommendations: int | None = attrs.field(default=None)\n\"\"\"The number of users that recommended this anime/manga.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.RecommendationModel.node","title":"node  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>node: dict[\nstr, RelatedMaterialNodeModel\n] | None = attrs.field(default=None)\n</code></pre> <p>Contains details of the recommended anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.common.RecommendationModel.num_recommendations","title":"num_recommendations  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>num_recommendations: int | None = attrs.field(default=None)\n</code></pre> <p>The number of users that recommended this anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.RelatedMaterialModel","title":"RelatedMaterialModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents related anime/manga model.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define\nclass RelatedMaterialModel(BaseModel):\n\"\"\"Represents related anime/manga model.\"\"\"\nnode: RelatedMaterialNodeModel | None = attrs.field(default=None)\n\"\"\"Contains details of the related anime/manga.\"\"\"\nrelation_type: str | None = attrs.field(default=None)\n\"\"\"Unformatted representation of the way this anime/manga is related to the parent anime/manga.\"\"\"\nrelation_type_formatted: str | None = attrs.field(default=None)\n\"\"\"Formatted representation of the way this anime/manga is related to the parent anime/manga.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.RelatedMaterialModel.node","title":"node  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>node: RelatedMaterialNodeModel | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>Contains details of the related anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.common.RelatedMaterialModel.relation_type","title":"relation_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>relation_type: str | None = attrs.field(default=None)\n</code></pre> <p>Unformatted representation of the way this anime/manga is related to the parent anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.common.RelatedMaterialModel.relation_type_formatted","title":"relation_type_formatted  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>relation_type_formatted: str | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>Formatted representation of the way this anime/manga is related to the parent anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.RelatedMaterialNodeModel","title":"RelatedMaterialNodeModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents individual node of the related material model.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define\nclass RelatedMaterialNodeModel(BaseModel):\n\"\"\"Represents individual node of the related material model.\"\"\"\nid: int | None = attrs.field(default=None)\n\"\"\"The id of the related anime/manga.\"\"\"\ntitle: str | None = attrs.field(default=None)\n\"\"\"The title of the related anime/manga.\"\"\"\nmain_picture: OptionalPictureModel | None = attrs.field(default=None)\n\"\"\"The urls for medium and large sized pictures of the posters of the related anime/manga.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.RelatedMaterialNodeModel.id","title":"id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>id: int | None = attrs.field(default=None)\n</code></pre> <p>The id of the related anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.common.RelatedMaterialNodeModel.main_picture","title":"main_picture  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>main_picture: OptionalPictureModel | None = attrs.field(\ndefault=None\n)\n</code></pre> <p>The urls for medium and large sized pictures of the posters of the related anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.common.RelatedMaterialNodeModel.title","title":"title  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>title: str | None = attrs.field(default=None)\n</code></pre> <p>The title of the related anime/manga.</p>"},{"location":"reference/models/#aniwrap.models.Route","title":"Route","text":"<p>Represents route details.</p> Source code in <code>aniwrap/models/route.py</code> <pre><code>@attrs.define\nclass Route:\n\"\"\"Represents route details.\"\"\"\nmethod: str\n\"\"\"The type of request.\"\"\"\nuri: str\n\"\"\"The request uri.\"\"\"\ndef generate_route(self, *args: str | int) -&gt; GenerateRoute:\n\"\"\"Generate route.\n        Args:\n            *args: the arguments to insert.\n        Returns:\n        \"\"\"\ngenerated_route = GenerateRoute(self)\nfor arg in args:\ngenerated_route.uri = generated_route.uri.replace(r\"()\", str(arg), 1)\nreturn generated_route\n</code></pre>"},{"location":"reference/models/#aniwrap.models.route.Route.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method: str\n</code></pre> <p>The type of request.</p>"},{"location":"reference/models/#aniwrap.models.route.Route.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre> <p>The request uri.</p>"},{"location":"reference/models/#aniwrap.models.route.Route.generate_route","title":"generate_route","text":"<pre><code>generate_route(*args: str | int) -&gt; GenerateRoute\n</code></pre> <p>Generate route.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>str | int</code> <p>the arguments to insert.</p> <code>()</code> Source code in <code>aniwrap/models/route.py</code> <pre><code>def generate_route(self, *args: str | int) -&gt; GenerateRoute:\n\"\"\"Generate route.\n    Args:\n        *args: the arguments to insert.\n    Returns:\n    \"\"\"\ngenerated_route = GenerateRoute(self)\nfor arg in args:\ngenerated_route.uri = generated_route.uri.replace(r\"()\", str(arg), 1)\nreturn generated_route\n</code></pre>"},{"location":"reference/models/#aniwrap.models.Season","title":"Season","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the model for anime season details.</p> Source code in <code>aniwrap/models/anime.py</code> <pre><code>@attrs.define\nclass Season(BaseModel):\n\"\"\"Represents the model for anime season details.\"\"\"\nyear: str\n\"\"\"The year.\"\"\"\nseason: AnimeSeason\n\"\"\"The season.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.anime.Season.season","title":"season  <code>instance-attribute</code>","text":"<pre><code>season: AnimeSeason\n</code></pre> <p>The season.</p>"},{"location":"reference/models/#aniwrap.models.anime.Season.year","title":"year  <code>instance-attribute</code>","text":"<pre><code>year: str\n</code></pre> <p>The year.</p>"},{"location":"reference/models/#aniwrap.models.Serialization","title":"Serialization","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the model for serialization.</p> Source code in <code>aniwrap/models/manga.py</code> <pre><code>@attrs.define\nclass Serialization(BaseModel):\n\"\"\"Represents the model for serialization.\"\"\"\nnode: CommonModel\n\"\"\"Contains the id and name of the serialization.\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.manga.Serialization.node","title":"node  <code>instance-attribute</code>","text":"<pre><code>node: CommonModel\n</code></pre> <p>Contains the id and name of the serialization.</p>"},{"location":"reference/models/#aniwrap.models.TitlesModel","title":"TitlesModel","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents the model for alternative title fields.</p> Source code in <code>aniwrap/models/common.py</code> <pre><code>@attrs.define(init=False)\nclass TitlesModel(BaseModel):\n\"\"\"Represents the model for alternative title fields.\"\"\"\nsynonyms: list(str)\n\"\"\"Synonyms of the title of Anime/Manga.\"\"\"\nen: str\n\"\"\"The English title of the Anime/Manga\"\"\"\nja: str\n\"\"\"The Japanese title of the Anime/Manga\"\"\"\n</code></pre>"},{"location":"reference/models/#aniwrap.models.common.TitlesModel.en","title":"en  <code>instance-attribute</code>","text":"<pre><code>en: str\n</code></pre> <p>The English title of the Anime/Manga</p>"},{"location":"reference/models/#aniwrap.models.common.TitlesModel.ja","title":"ja  <code>instance-attribute</code>","text":"<pre><code>ja: str\n</code></pre> <p>The Japanese title of the Anime/Manga</p>"},{"location":"reference/models/#aniwrap.models.common.TitlesModel.synonyms","title":"synonyms  <code>instance-attribute</code>","text":"<pre><code>synonyms: list(str)\n</code></pre> <p>Synonyms of the title of Anime/Manga.</p>"},{"location":"reference/result/","title":"result","text":"<p>Module for result which every method in the module returns.</p>"},{"location":"reference/result/#aniwrap.result.Error","title":"Error","text":"<p>         Bases: <code>Result[S, E]</code></p> <p>Represents Error result class.</p> Source code in <code>aniwrap/result.py</code> <pre><code>class Error(Result[S, E]):\n\"\"\"Represents Error result class.\"\"\"\n__slots__ = ()\ndef __init__(self, error) -&gt; None:\nself._error = error\n@property\ndef is_success(self) -&gt; bool:\n\"\"\"Returns `False` for success result.\"\"\"\nreturn False\n@property\ndef is_error(self) -&gt; bool:\n\"\"\"Returns `True` for success result.\"\"\"\nreturn True\n@property\ndef value(self) -&gt; S:\nreturn None\n@property\ndef error(self) -&gt; E:\nreturn self._error\n</code></pre>"},{"location":"reference/result/#aniwrap.result.Error.is_error","title":"is_error  <code>property</code>","text":"<pre><code>is_error: bool\n</code></pre> <p>Returns <code>True</code> for success result.</p>"},{"location":"reference/result/#aniwrap.result.Error.is_success","title":"is_success  <code>property</code>","text":"<pre><code>is_success: bool\n</code></pre> <p>Returns <code>False</code> for success result.</p>"},{"location":"reference/result/#aniwrap.result.Result","title":"Result","text":"<p>         Bases: <code>Generic[S, E]</code>, <code>abc.ABC</code></p> <p>Represents Result.</p> Source code in <code>aniwrap/result.py</code> <pre><code>class Result(Generic[S, E], abc.ABC):\n\"\"\"Represents Result.\"\"\"\n__slots__ = (\"_error\", \"_value\")\ndef __init__(self, value, error) -&gt; None:\nself._value = value\nself._error = error\n@property\ndef is_success(self) -&gt; bool:\n\"\"\"Returns `True` for success result and `False` for error result.\"\"\"\n@property\ndef is_error(self) -&gt; bool:\n\"\"\"Returns `True` for error result and `False` for success result.\"\"\"\n@property\ndef value(self) -&gt; S:\n\"\"\"Returns data for a success result and `None` for an error result.\"\"\"\n@property\ndef error(self) -&gt; E:\n\"\"\"Returns error for an error result and `None` for a success result.\"\"\"\n</code></pre>"},{"location":"reference/result/#aniwrap.result.Result.error","title":"error  <code>property</code>","text":"<pre><code>error: E\n</code></pre> <p>Returns error for an error result and <code>None</code> for a success result.</p>"},{"location":"reference/result/#aniwrap.result.Result.is_error","title":"is_error  <code>property</code>","text":"<pre><code>is_error: bool\n</code></pre> <p>Returns <code>True</code> for error result and <code>False</code> for success result.</p>"},{"location":"reference/result/#aniwrap.result.Result.is_success","title":"is_success  <code>property</code>","text":"<pre><code>is_success: bool\n</code></pre> <p>Returns <code>True</code> for success result and <code>False</code> for error result.</p>"},{"location":"reference/result/#aniwrap.result.Result.value","title":"value  <code>property</code>","text":"<pre><code>value: S\n</code></pre> <p>Returns data for a success result and <code>None</code> for an error result.</p>"},{"location":"reference/result/#aniwrap.result.Success","title":"Success","text":"<p>         Bases: <code>Result[S, E]</code></p> <p>Reprsents Success result class.</p> Source code in <code>aniwrap/result.py</code> <pre><code>class Success(Result[S, E]):\n\"\"\"Reprsents Success result class.\"\"\"\n__slots__ = ()\ndef __init__(self, value) -&gt; None:\nself._value = value\n@property\ndef is_success(self) -&gt; bool:\n\"\"\"Returns `True` for success result.\"\"\"\nreturn True\n@property\ndef is_error(self) -&gt; bool:\n\"\"\"Returns `False` for success result.\"\"\"\nreturn False\n@property\ndef value(self) -&gt; S:\nreturn self._value\n@property\ndef error(self) -&gt; E:\nreturn None\n</code></pre>"},{"location":"reference/result/#aniwrap.result.Success.is_error","title":"is_error  <code>property</code>","text":"<pre><code>is_error: bool\n</code></pre> <p>Returns <code>False</code> for success result.</p>"},{"location":"reference/result/#aniwrap.result.Success.is_success","title":"is_success  <code>property</code>","text":"<pre><code>is_success: bool\n</code></pre> <p>Returns <code>True</code> for success result.</p>"},{"location":"reference/serializer/","title":"serializer","text":"<p>Module to serialize and deserialize JSON data and models.</p>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer","title":"Serializer","text":"<p>Deserializes JSON data to models.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>class Serializer:\n\"\"\"Deserializes JSON data to models.\"\"\"\n__slots__ = ()\ndef _date_from_str(self, date_str: str | None) -&gt; datetime | None:\n\"\"\"Converts string of `yyyy-mm-dd` or `yyyy-mm` or `yyyy` format to datetime. Returns `None` if input string is empty.\"\"\"\nformat = \"%Y-%m-%d\"\nif date_str:\nif date_str.count(\"-\") == 0:\nformat = \"%Y\"\nelif date_str.count(\"-\") == 1:\nformat = \"%Y-%m\"\nreturn datetime.strptime(date_str, format) if date_str else None\ndef _datetime_from_str(self, datetime_str: str | None) -&gt; datetime | None:\n\"\"\"Converts string of `yyyy-mm-ddTH:M:S` to datetime. Returns `None` if input string is empty.\"\"\"\nreturn (\ndatetime.strptime(datetime_str, \"%Y-%m-%dT%H:%M:%S\")\nif datetime_str\nelse None\n)\ndef _datetime_from_iso(self, datetime_str: str | None) -&gt; datetime | None:\nreturn datetime.fromisoformat(datetime_str) if datetime_str else None\ndef _time_from_str(self, time_str: str) -&gt; time.struct_time | None:\n\"\"\"Converts string of `H:M` format to time.\"\"\"\nreturn time.strptime(time_str, \"%H:%M\") if time_str else None\ndef _set_attrs(self, model: Any, data: dict[str, Any], *attrs: str) -&gt; None:\n\"\"\"Generate model from JSON payload.\"\"\"\nif data:\nfor attr in attrs:\nif data.get(attr) is not None:\nsetattr(model, attr, data[attr])\nelse:\nsetattr(model, attr, None)\ndef _deserialize_genres(self, data: dict[str, Any]) -&gt; list[CommonModel]:\n\"\"\"Deserializes genres JSON data into model.\"\"\"\nreturn [CommonModel(genre.get(\"id\"), genre.get(\"name\")) for genre in data]\ndef _deserialize_studios(self, data: dict[str, Any]) -&gt; list[CommonModel]:\n\"\"\"Deserializes studios JSON data into model.\"\"\"\nreturn [CommonModel(genre.get(\"id\"), genre.get(\"name\")) for genre in data]\ndef _deserialize_pictures(self, data: dict[str, Any]) -&gt; list[OptionalPictureModel]:\n\"\"\"Desrializes picture JSON data to model.\"\"\"\nreturn [\nOptionalPictureModel(picture.get(\"medium\"), picture.get(\"large\"))\nfor picture in data\n]\ndef _deserialize_related_material(\nself, data: dict[str, Any]\n) -&gt; list[RelatedMaterialModel]:\n\"\"\"Deserializes related anime/manga JSON data to model.\"\"\"\nreturn [\nRelatedMaterialModel(\nRelatedMaterialNodeModel(\nrel_material.get(\"node\", {}).get(\"id\"),\nrel_material.get(\"node\", {}).get(\"title\"),\nOptionalPictureModel(\nrel_material.get(\"node\", {})\n.get(\"main_picture\", {})\n.get(\"medium\"),\nrel_material.get(\"node\", {})\n.get(\"main_picture\", {})\n.get(\"large\"),\n),\n),\nrel_material.get(\"relation_type\"),\nrel_material.get(\"relation_type_formatted\"),\n)\nfor rel_material in data\n]\ndef _deserialize_recommendations(\nself, data: dict[str, Any]\n) -&gt; list[RecommendationModel]:\n\"\"\"Deserializes anime/manga recommendations JSON data to model.\"\"\"\nreturn [\nRecommendationModel(\nRelatedMaterialNodeModel(\nrecommendation.get(\"node\", {}).get(\"id\"),\nrecommendation.get(\"node\", {}).get(\"title\"),\nOptionalPictureModel(\nrecommendation.get(\"node\", {})\n.get(\"main_picture\", {})\n.get(\"medium\"),\nrecommendation.get(\"node\", {})\n.get(\"main_picture\", {})\n.get(\"large\"),\n),\n),\nrecommendation.get(\"num_recommendations\"),\n)\nfor recommendation in data\n]\ndef _deserialize_alternative_titles(self, data: dict[str, Any]) -&gt; TitlesModel:\n\"\"\"Deserializes alternative titles json data into model.\"\"\"\nalternative_titles = TitlesModel()\nself._set_attrs(alternative_titles, data, \"synonyms\", \"en\", \"ja\")\nreturn alternative_titles\ndef _deserialize_main_picture(self, data: dict[str, Any]) -&gt; PictureModel:\n\"\"\"Deserializes anime/manga main picture JSON data into model.\"\"\"\nmain_picture = PictureModel()\nself._set_attrs(main_picture, data, \"medium\", \"large\")\nreturn main_picture\ndef _deserialize_authors(self, data: dict[str, Any]) -&gt; list[Author]:\n\"\"\"Deserializes Manga authors JSON data into model.\"\"\"\nreturn [\nAuthor(\nAuthorName(\nauthor.get(\"node\", {}).get(\"id\"),\nauthor.get(\"node\", {}).get(\"first_name\"),\nauthor.get(\"node\", {}).get(\"last_name\"),\n),\nauthor.get(\"role\"),\n)\nfor author in data\n]\ndef _deserialize_manga_serialization(\nself, data: dict[str, Any]\n) -&gt; list[Serialization]:\n\"\"\"Deserializes Manga manga serialization JSON data into model\"\"\"\nreturn [\nCommonModel(ser.get(\"node\", {}).get(\"id\"), ser.get(\"node\", {}).get(\"name\"))\nfor ser in data\n]\ndef _deserialize_board(self, data: dict[str, Any]) -&gt; ForumBoard:\n\"\"\"\"\"\"\nboard = ForumBoard()\nself._set_attrs(board, data, \"id\", \"title\", \"description\")\nsubboards = [\nForumSubBoard(subboard.get(\"id\"), subboard.get(\"title\"))\nfor subboard in data.get(\"subboards\", [])\n]\nboard.subboards = subboards\nreturn board\ndef _deserialize_forum_post(self, data: dict[str, Any]) -&gt; ForumPost:\n\"\"\"\"\"\"\nforum_post = ForumPost()\nforum_post_creator = PostCreator()\nforum_post.created_at = self._datetime_from_iso(data.get(\"created_at\"))\nself._set_attrs(\nforum_post_creator, data.get(\"created_by\", {}), \"id\", \"name\", \"forum_avator\"\n)\nforum_post.created_by = forum_post_creator\nself._set_attrs(forum_post, data, \"id\", \"number\", \"body\", \"signature\")\nreturn forum_post\ndef deserialize_anime_results(\nself, data: list[dict[str, Any]]\n) -&gt; list[Anime] | None:\n\"\"\"Deserializes JSON payload into list of Anime model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            List of Anime [`list[Anime]`]. Defaults to `None` if no data is found.\n        \"\"\"\nreturn [\nself.deserialize_anime(element.get(\"node\"))\nfor element in data.get(\"data\", {})\n]\ndef deserialize_anime(self, data: dict[str, Any]) -&gt; Anime:\n\"\"\"Deserialize individual Anime JSON payload into Anime model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            `Anime` model.\n        \"\"\"\nanime_fields = Anime()\nanime_fields.main_picture = self._deserialize_main_picture(\ndata.get(\"main_picture\", {})\n)\nanime_fields.alternative_titles = self._deserialize_alternative_titles(\ndata.get(\"alternative_titles\", {})\n)\nanime_fields.genres = self._deserialize_genres(data.get(\"genres\", []))\nanime_fields.status = AnimeStatus.try_from_str(data.get(\"status\"))\nanime_fields.nsfw = NSFWLevel.try_from_str(data.get(\"nsfw\", \"white\"))\nanime_fields.start_season = Season(\ndata.get(\"start_season\", {}).get(\"year\"),\nAnimeSeason.try_from_str(data.get(\"start_season\", {}).get(\"season\")),\n)\nanime_fields.broadcast = Broadcast(\ndata.get(\"broadcast\", {}).get(\"day_of_the_week\"),\nself._time_from_str(data.get(\"broadcast\", {}).get(\"start_time\")),\n)\nanime_fields.studios = self._deserialize_studios(data.get(\"studios\", []))\nanime_fields.media_type = (\nAnimeType.try_from_str(data.get(\"media_type\")) or AnimeType.Unknown\n)\nanime_fields.start_date = self._date_from_str(data.get(\"start_date\"))\nanime_fields.end_date = self._date_from_str(data.get(\"end_date\"))\nanime_fields.created_at = self._datetime_from_iso(data.get(\"created_at\"))\nanime_fields.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nanime_fields.pictures = self._deserialize_pictures(data.get(\"pictures\", []))\nanime_fields.related_anime = self._deserialize_related_material(\ndata.get(\"related_anime\", [])\n)\nanime_fields.recommendations = self._deserialize_recommendations(\ndata.get(\"recommendations\", [])\n)\nanime_fields.statistics = AnimeStatistics(\nAnimeStatisticsStatus(\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"watching\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"completed\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"on_hold\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"dropped\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"plan_to_watch\"),\n),\ndata.get(\"statistics\", {}).get(\"num_list_users\"),\n)\nself._set_attrs(\nanime_fields,\ndata,\n\"id\",\n\"title\",\n\"synopsis\",\n\"mean\",\n\"rank\",\n\"popularity\",\n\"num_list_users\",\n\"num_scoring_users\",\n\"num_episodes\",\n\"source\",\n\"average_episode_duration\",\n\"rating\",\n\"background\",\n)\nreturn anime_fields\ndef deserialize_anime_ranking(self, data: dict[str, Any]) -&gt; list[AnimeRanking]:\n\"\"\"Deserializes JSON payload into list of AnimeRanking model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            List of AnimeRanking [`list[AnimeRanking]`]. Defaults to `None` if no data is found.\n        \"\"\"\nreturn [\nAnimeRanking(\nself.deserialize_anime(element.get(\"node\", {})),\nRankingModel(element.get(\"ranking\", {}).get(\"rank\")),\n)\nfor element in data.get(\"data\", [])\n]\ndef deserialize_manga_results(self, data: list[dict[str, Any]]) -&gt; list[Manga]:\n\"\"\"Deserializes JSON payload into list of Manga model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            List of Manga [`list[Manga]`]. Defaults to `None` if no data is found.\n        \"\"\"\nreturn [\nself.deserialize_manga(element.get(\"node\"))\nfor element in data.get(\"data\", {})\n]\ndef deserialize_manga(self, data: dict[str, Any]) -&gt; Manga:\n\"\"\"Deserialize individual Manga JSON payload into Manga model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            `Manga` model.\"\"\"\nmanga_fields = Manga()\nmanga_fields.nsfw = NSFWLevel.try_from_str(data.get(\"nsfw\", \"white\"))\nmanga_fields.media_type = (\nMangaType.try_from_str(data.get(\"media_type\", \"unknown\"))\nor MangaType.Unknown\n)\nmanga_fields.status = MangaStatus.try_from_str(data.get(\"status\"))\nmanga_fields.main_picture = self._deserialize_main_picture(\ndata.get(\"main_picture\", {})\n)\nmanga_fields.pictures = self._deserialize_pictures(data.get(\"pictures\", []))\nmanga_fields.alternative_titles = self._deserialize_alternative_titles(\ndata.get(\"alternative_titles\", {})\n)\nmanga_fields.genres = self._deserialize_genres(data.get(\"genres\", []))\nmanga_fields.authors = self._deserialize_authors(data.get(\"authors\", []))\nmanga_fields.related_manga = self._deserialize_related_material(\ndata.get(\"related_manga\", [])\n)\nmanga_fields.recommendations = self._deserialize_recommendations(\ndata.get(\"recommendations\", [])\n)\nmanga_fields.serialization = self._deserialize_manga_serialization(\ndata.get(\"serialization\", {})\n)\nmanga_fields.start_date = self._date_from_str(data.get(\"start_date\"))\nmanga_fields.end_date = self._date_from_str(data.get(\"end_date\"))\nmanga_fields.created_at = self._datetime_from_iso(data.get(\"created_at\"))\nmanga_fields.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nself._set_attrs(\nmanga_fields,\ndata,\n\"id\",\n\"title\",\n\"synopsis\",\n\"mean\",\n\"rank\",\n\"popularity\",\n\"num_list_users\",\n\"num_scoring_users\",\n\"num_volumes\",\n\"num_chapters\",\n\"background\",\n)\nreturn manga_fields\ndef deserialize_manga_ranking(self, data: dict[str, Any]) -&gt; list[MangaRanking]:\n\"\"\"Deserializes JSON payload into list of MangaRanking model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            List of MangaRanking [`list[MangaRanking]`]. Defaults to `None` if no data is found.\n        \"\"\"\nreturn [\nMangaRanking(\nself.deserialize_manga(element.get(\"node\", {})),\nRankingModel(element.get(\"ranking\", {}).get(\"rank\")),\n)\nfor element in data.get(\"data\", [])\n]\ndef deserialize_forum_board(self, data: dict[str, Any]) -&gt; Forum:\n\"\"\"\"\"\"\nforum_fields = Forum()\nforum_fields.title = data.get(\"title\")\nforum_fields.boards = [\nself._deserialize_board(board) for board in data.get(\"boards\", [])\n]\nreturn forum_fields\ndef deserialize_forum_topic(self, data: dict[str, Any]) -&gt; ForumTopic:\n\"\"\"\"\"\"\nforum_topic = ForumTopic()\nforum_topic.created_by = CommonModel(\ndata.get(\"created_by\", {}).get(\"id\"), data.get(\"created_by\", {}).get(\"name\")\n)\nforum_topic.last_post_created_by = CommonModel(\ndata.get(\"last_post_created_by\", {}).get(\"id\"),\ndata.get(\"last_post_created_by\", {}).get(\"name\"),\n)\nforum_topic.created_at = self._datetime_from_iso(data.get(\"created_at\"))\nforum_topic.last_post_created_at = self._datetime_from_iso(\ndata.get(\"last_post_created_at\")\n)\nself._set_attrs(\nforum_topic, data, \"id\", \"title\", \"number_of_posts\", \"is_locked\"\n)\nreturn forum_topic\ndef deserialize_forum_topic_details(\nself, data: dict[str, Any]\n) -&gt; ForumTopicDetails:\n\"\"\"\"\"\"\nforum_topic_details = ForumTopicDetails()\nforum_topic_details.posts = [\nself._deserialize_forum_post(p) for p in data.get(\"posts\", [])\n]\nself._set_attrs(forum_topic_details, data, \"title\")\nreturn forum_topic_details\ndef deserialize_user_anime_list(self, data: dict[str, Any]) -&gt; AnimeList:\n\"\"\"Deserialize JSON payload into AnimeList model.\"\"\"\nreturn AnimeList(\nself.deserialize_anime(data.get(\"node\", {})),\nself._deserialize_user_anime_list_status(data.get(\"list_status\", {})),\n)\ndef _deserialize_user_anime_list_status(\nself, data: dict[str, Any]\n) -&gt; AnimeListStatus:\n\"\"\"Deserialize JSON payload into AnimeListStatus model.\"\"\"\nanime_list_status = AnimeListStatus()\nanime_list_status.status = AnimeWatchStatus.from_str(\ndata.get(\"status\", \"watching\")\n)\nanime_list_status.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nanime_list_status.start_date = self._date_from_str(data.get(\"start_date\"))\nanime_list_status.finish_date = self._date_from_str(data.get(\"finish_date\"))\nself._set_attrs(\nanime_list_status, data, \"score\", \"num_episodes_watched\", \"is_rewatching\"\n)\nreturn anime_list_status\ndef deserialize_anime_list_update(self, data: dict[str, Any]) -&gt; AnimeListUpdate:\n\"\"\"Deserialize JSON payload into AnimeListUpdate model.\"\"\"\nanime_list_update = AnimeListUpdate()\nanime_list_update.priority = ListPriority.from_str(data.get(\"priority\"))\nanime_list_update.rewatch_value = AnimeRewatchValue.try_from_str(\ndata.get(\"rewatch_value\")\n)\nanime_list_update.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nself._set_attrs(\nanime_list_update,\ndata,\n\"status\",\n\"score\",\n\"num_episodes_watched\",\n\"is_rewatching\",\n\"num_times_rewatched\",\n\"tags\",\n\"comments\",\n)\nreturn anime_list_update\ndef deserialize_user_manga_list(self, data: dict[str, Any]) -&gt; MangaList:\n\"\"\"Deserializes JSON payload into MangaList model.\"\"\"\nreturn MangaList(\nself.deserialize_manga(data.get(\"node\", {})),\nself._deserialize_user_manga_list_status(data.get(\"list_status\", {})),\n)\ndef _deserialize_user_manga_list_status(\nself, data: dict[str, Any]\n) -&gt; MangaListStatus:\n\"\"\"Deserializes JSON payload into MangaListStatus model.\"\"\"\nmanga_list_status = MangaListStatus()\nmanga_list_status.status = MangaReadStatus.from_str(\ndata.get(\"status\", \"reading\")\n)\nmanga_list_status.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nmanga_list_status.start_date = self._date_from_str(data.get(\"start_date\"))\nmanga_list_status.finish_date = self._date_from_str(data.get(\"finish_date\"))\nself._set_attrs(\nmanga_list_status,\ndata,\n\"score\",\n\"num_volumes_read\",\n\"num_chapters_read\",\n\"is_rereading\",\n)\nreturn manga_list_status\ndef deserialize_manga_list_update(self, data: dict[str, Any]) -&gt; MangaListUpdate:\n\"\"\"Deserializes JSON payload into MangaListUpdate model.\"\"\"\nmanga_list_update = MangaListUpdate()\nmanga_list_update.priority = ListPriority.from_str(data.get(\"priority\"))\nmanga_list_update.reread_value = MangaRereadValue.try_from_str(\ndata.get(\"reread_value\")\n)\nmanga_list_update.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nself._set_attrs(\nmanga_list_update,\ndata,\n\"status\",\n\"score\",\n\"num_volumes_read\",\n\"num_chapters_read\",\n\"is_rereading\",\n\"num_times_reread\",\n\"tags\",\n\"comments\",\n)\nreturn manga_list_update\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_anime","title":"deserialize_anime","text":"<pre><code>deserialize_anime(data: dict[str, Any]) -&gt; Anime\n</code></pre> <p>Deserialize individual Anime JSON payload into Anime model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>Anime</code> <p><code>Anime</code> model.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_anime(self, data: dict[str, Any]) -&gt; Anime:\n\"\"\"Deserialize individual Anime JSON payload into Anime model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        `Anime` model.\n    \"\"\"\nanime_fields = Anime()\nanime_fields.main_picture = self._deserialize_main_picture(\ndata.get(\"main_picture\", {})\n)\nanime_fields.alternative_titles = self._deserialize_alternative_titles(\ndata.get(\"alternative_titles\", {})\n)\nanime_fields.genres = self._deserialize_genres(data.get(\"genres\", []))\nanime_fields.status = AnimeStatus.try_from_str(data.get(\"status\"))\nanime_fields.nsfw = NSFWLevel.try_from_str(data.get(\"nsfw\", \"white\"))\nanime_fields.start_season = Season(\ndata.get(\"start_season\", {}).get(\"year\"),\nAnimeSeason.try_from_str(data.get(\"start_season\", {}).get(\"season\")),\n)\nanime_fields.broadcast = Broadcast(\ndata.get(\"broadcast\", {}).get(\"day_of_the_week\"),\nself._time_from_str(data.get(\"broadcast\", {}).get(\"start_time\")),\n)\nanime_fields.studios = self._deserialize_studios(data.get(\"studios\", []))\nanime_fields.media_type = (\nAnimeType.try_from_str(data.get(\"media_type\")) or AnimeType.Unknown\n)\nanime_fields.start_date = self._date_from_str(data.get(\"start_date\"))\nanime_fields.end_date = self._date_from_str(data.get(\"end_date\"))\nanime_fields.created_at = self._datetime_from_iso(data.get(\"created_at\"))\nanime_fields.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nanime_fields.pictures = self._deserialize_pictures(data.get(\"pictures\", []))\nanime_fields.related_anime = self._deserialize_related_material(\ndata.get(\"related_anime\", [])\n)\nanime_fields.recommendations = self._deserialize_recommendations(\ndata.get(\"recommendations\", [])\n)\nanime_fields.statistics = AnimeStatistics(\nAnimeStatisticsStatus(\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"watching\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"completed\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"on_hold\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"dropped\"),\ndata.get(\"statistics\", {}).get(\"status\", {}).get(\"plan_to_watch\"),\n),\ndata.get(\"statistics\", {}).get(\"num_list_users\"),\n)\nself._set_attrs(\nanime_fields,\ndata,\n\"id\",\n\"title\",\n\"synopsis\",\n\"mean\",\n\"rank\",\n\"popularity\",\n\"num_list_users\",\n\"num_scoring_users\",\n\"num_episodes\",\n\"source\",\n\"average_episode_duration\",\n\"rating\",\n\"background\",\n)\nreturn anime_fields\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_anime_list_update","title":"deserialize_anime_list_update","text":"<pre><code>deserialize_anime_list_update(\ndata: dict[str, Any]\n) -&gt; AnimeListUpdate\n</code></pre> <p>Deserialize JSON payload into AnimeListUpdate model.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_anime_list_update(self, data: dict[str, Any]) -&gt; AnimeListUpdate:\n\"\"\"Deserialize JSON payload into AnimeListUpdate model.\"\"\"\nanime_list_update = AnimeListUpdate()\nanime_list_update.priority = ListPriority.from_str(data.get(\"priority\"))\nanime_list_update.rewatch_value = AnimeRewatchValue.try_from_str(\ndata.get(\"rewatch_value\")\n)\nanime_list_update.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nself._set_attrs(\nanime_list_update,\ndata,\n\"status\",\n\"score\",\n\"num_episodes_watched\",\n\"is_rewatching\",\n\"num_times_rewatched\",\n\"tags\",\n\"comments\",\n)\nreturn anime_list_update\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_anime_ranking","title":"deserialize_anime_ranking","text":"<pre><code>deserialize_anime_ranking(\ndata: dict[str, Any]\n) -&gt; list[AnimeRanking]\n</code></pre> <p>Deserializes JSON payload into list of AnimeRanking model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>list[AnimeRanking]</code> <p>List of AnimeRanking [<code>list[AnimeRanking]</code>]. Defaults to <code>None</code> if no data is found.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_anime_ranking(self, data: dict[str, Any]) -&gt; list[AnimeRanking]:\n\"\"\"Deserializes JSON payload into list of AnimeRanking model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        List of AnimeRanking [`list[AnimeRanking]`]. Defaults to `None` if no data is found.\n    \"\"\"\nreturn [\nAnimeRanking(\nself.deserialize_anime(element.get(\"node\", {})),\nRankingModel(element.get(\"ranking\", {}).get(\"rank\")),\n)\nfor element in data.get(\"data\", [])\n]\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_anime_results","title":"deserialize_anime_results","text":"<pre><code>deserialize_anime_results(\ndata: list[dict[str, Any]]\n) -&gt; list[Anime] | None\n</code></pre> <p>Deserializes JSON payload into list of Anime model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[dict[str, Any]]</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>list[Anime] | None</code> <p>List of Anime [<code>list[Anime]</code>]. Defaults to <code>None</code> if no data is found.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_anime_results(\nself, data: list[dict[str, Any]]\n) -&gt; list[Anime] | None:\n\"\"\"Deserializes JSON payload into list of Anime model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        List of Anime [`list[Anime]`]. Defaults to `None` if no data is found.\n    \"\"\"\nreturn [\nself.deserialize_anime(element.get(\"node\"))\nfor element in data.get(\"data\", {})\n]\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_manga","title":"deserialize_manga","text":"<pre><code>deserialize_manga(data: dict[str, Any]) -&gt; Manga\n</code></pre> <p>Deserialize individual Manga JSON payload into Manga model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>Manga</code> <p><code>Manga</code> model.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_manga(self, data: dict[str, Any]) -&gt; Manga:\n\"\"\"Deserialize individual Manga JSON payload into Manga model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        `Manga` model.\"\"\"\nmanga_fields = Manga()\nmanga_fields.nsfw = NSFWLevel.try_from_str(data.get(\"nsfw\", \"white\"))\nmanga_fields.media_type = (\nMangaType.try_from_str(data.get(\"media_type\", \"unknown\"))\nor MangaType.Unknown\n)\nmanga_fields.status = MangaStatus.try_from_str(data.get(\"status\"))\nmanga_fields.main_picture = self._deserialize_main_picture(\ndata.get(\"main_picture\", {})\n)\nmanga_fields.pictures = self._deserialize_pictures(data.get(\"pictures\", []))\nmanga_fields.alternative_titles = self._deserialize_alternative_titles(\ndata.get(\"alternative_titles\", {})\n)\nmanga_fields.genres = self._deserialize_genres(data.get(\"genres\", []))\nmanga_fields.authors = self._deserialize_authors(data.get(\"authors\", []))\nmanga_fields.related_manga = self._deserialize_related_material(\ndata.get(\"related_manga\", [])\n)\nmanga_fields.recommendations = self._deserialize_recommendations(\ndata.get(\"recommendations\", [])\n)\nmanga_fields.serialization = self._deserialize_manga_serialization(\ndata.get(\"serialization\", {})\n)\nmanga_fields.start_date = self._date_from_str(data.get(\"start_date\"))\nmanga_fields.end_date = self._date_from_str(data.get(\"end_date\"))\nmanga_fields.created_at = self._datetime_from_iso(data.get(\"created_at\"))\nmanga_fields.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nself._set_attrs(\nmanga_fields,\ndata,\n\"id\",\n\"title\",\n\"synopsis\",\n\"mean\",\n\"rank\",\n\"popularity\",\n\"num_list_users\",\n\"num_scoring_users\",\n\"num_volumes\",\n\"num_chapters\",\n\"background\",\n)\nreturn manga_fields\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_manga_list_update","title":"deserialize_manga_list_update","text":"<pre><code>deserialize_manga_list_update(\ndata: dict[str, Any]\n) -&gt; MangaListUpdate\n</code></pre> <p>Deserializes JSON payload into MangaListUpdate model.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_manga_list_update(self, data: dict[str, Any]) -&gt; MangaListUpdate:\n\"\"\"Deserializes JSON payload into MangaListUpdate model.\"\"\"\nmanga_list_update = MangaListUpdate()\nmanga_list_update.priority = ListPriority.from_str(data.get(\"priority\"))\nmanga_list_update.reread_value = MangaRereadValue.try_from_str(\ndata.get(\"reread_value\")\n)\nmanga_list_update.updated_at = self._datetime_from_iso(data.get(\"updated_at\"))\nself._set_attrs(\nmanga_list_update,\ndata,\n\"status\",\n\"score\",\n\"num_volumes_read\",\n\"num_chapters_read\",\n\"is_rereading\",\n\"num_times_reread\",\n\"tags\",\n\"comments\",\n)\nreturn manga_list_update\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_manga_ranking","title":"deserialize_manga_ranking","text":"<pre><code>deserialize_manga_ranking(\ndata: dict[str, Any]\n) -&gt; list[MangaRanking]\n</code></pre> <p>Deserializes JSON payload into list of MangaRanking model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any]</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>list[MangaRanking]</code> <p>List of MangaRanking [<code>list[MangaRanking]</code>]. Defaults to <code>None</code> if no data is found.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_manga_ranking(self, data: dict[str, Any]) -&gt; list[MangaRanking]:\n\"\"\"Deserializes JSON payload into list of MangaRanking model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        List of MangaRanking [`list[MangaRanking]`]. Defaults to `None` if no data is found.\n    \"\"\"\nreturn [\nMangaRanking(\nself.deserialize_manga(element.get(\"node\", {})),\nRankingModel(element.get(\"ranking\", {}).get(\"rank\")),\n)\nfor element in data.get(\"data\", [])\n]\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_manga_results","title":"deserialize_manga_results","text":"<pre><code>deserialize_manga_results(\ndata: list[dict[str, Any]]\n) -&gt; list[Manga]\n</code></pre> <p>Deserializes JSON payload into list of Manga model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>list[dict[str, Any]]</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>list[Manga]</code> <p>List of Manga [<code>list[Manga]</code>]. Defaults to <code>None</code> if no data is found.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_manga_results(self, data: list[dict[str, Any]]) -&gt; list[Manga]:\n\"\"\"Deserializes JSON payload into list of Manga model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        List of Manga [`list[Manga]`]. Defaults to `None` if no data is found.\n    \"\"\"\nreturn [\nself.deserialize_manga(element.get(\"node\"))\nfor element in data.get(\"data\", {})\n]\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_user_anime_list","title":"deserialize_user_anime_list","text":"<pre><code>deserialize_user_anime_list(\ndata: dict[str, Any]\n) -&gt; AnimeList\n</code></pre> <p>Deserialize JSON payload into AnimeList model.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_user_anime_list(self, data: dict[str, Any]) -&gt; AnimeList:\n\"\"\"Deserialize JSON payload into AnimeList model.\"\"\"\nreturn AnimeList(\nself.deserialize_anime(data.get(\"node\", {})),\nself._deserialize_user_anime_list_status(data.get(\"list_status\", {})),\n)\n</code></pre>"},{"location":"reference/serializer/#aniwrap.serializer.Serializer.deserialize_user_manga_list","title":"deserialize_user_manga_list","text":"<pre><code>deserialize_user_manga_list(\ndata: dict[str, Any]\n) -&gt; MangaList\n</code></pre> <p>Deserializes JSON payload into MangaList model.</p> Source code in <code>aniwrap/serializer.py</code> <pre><code>def deserialize_user_manga_list(self, data: dict[str, Any]) -&gt; MangaList:\n\"\"\"Deserializes JSON payload into MangaList model.\"\"\"\nreturn MangaList(\nself.deserialize_manga(data.get(\"node\", {})),\nself._deserialize_user_manga_list_status(data.get(\"list_status\", {})),\n)\n</code></pre>"},{"location":"reference/services/","title":"services","text":"<p>Contains services that makes the actual requests to MAL api.</p>"},{"location":"reference/services/#aniwrap.services.AnimeService","title":"AnimeService","text":"<p>         Bases: <code>BaseService</code></p> <p>Hanldes all the methods related to Anime.</p> Source code in <code>aniwrap/services/anime.py</code> <pre><code>class AnimeService(BaseService):\n\"\"\"Hanldes all the methods related to Anime.\"\"\"\n_fields = \"id,title,main_picture,alternative_titles,start_date,end_date,synopsis,mean,rank,popularity,num_list_users,num_scoring_users,nsfw,created_at,updated_at,media_type,status,genres,num_episodes,start_season,broadcast,source,average_episode_duration,rating,pictures,background,related_anime,related_manga,recommendations,studios,statistics\"\n__slots__ = ()\nasync def search_anime(\nself, anime_name: str, *, limit: int | None = 10, offset: int | None = 0\n) -&gt; ResultT[list[Anime]]:\n\"\"\"Search for anime by title.\n        Args:\n            anime_name: Title or name of the anime.\n        Keyword Args:\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[Anime]` on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.anime.search_anime(\"blue lock\", limit=5, offset=0)\n            if result.is_success:\n                anime_list = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"q\": anime_name,\n}\nroute = endpoints.SEARCH_ANIME.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_results(result.data))\nasync def get_anime(self, id: int | str) -&gt; ResultT[Anime]:\n\"\"\"Get details of anime by the anime id.\n        Args:\n            id: The Id of the anime.\n        Returns:\n            [`Result`][aniwrap.Result] containing `Anime` on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.anime.get_anime(16498)\n            if result.is_success:\n                anime_details = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nparams = {\"fields\": self._fields}\nroute = endpoints.GET_ANIME.generate_route(id).with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime(result.data))\nasync def get_anime_ranking(\nself,\nranking_type: AnimeRankingType,\n*,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[AnimeRanking]]:\n\"\"\"Get different types of anime rankings.\n        Args:\n            ranking_type: The type of ranking. Check enum `AnimeRankingType` for all the possible types.\n        Keyword Args:\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[AnimeRanking]` model on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.anime.get_anime_ranking(AnimeRankingType.All, limit=5, offset=0)\n            if result.is_success:\n                anime_list = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"ranking_type\": ranking_type.value,\n}\nroute = endpoints.GET_ANIME_RANKING.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_ranking(result.data))\nasync def get_seasonal_anime(\nself,\nyear: int,\nseason: AnimeSeason,\n*,\nsort_type: AnimeSortType = AnimeSortType.AnimeScore,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[Anime]]:\n\"\"\"Get anime by season and year.\n        Args:\n            year: The year.\n            season: The anime season in the year.\n        Keyword Args:\n            sort_type: The optional sort_type based on which the anime results will be sorted.\n                Defaults to `AnimeSortType.AnimeScore`.\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[Anime]` model on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.anime.get_seasonal_anime(\n                2020, AnimeSeason.Fall, sort_type=AnimeSortType.NumberOfUsers\n            )\n            if result.is_success:\n                anime_list = result.value\n            if result.is_error:\n                error = result.error\n            ```\n        \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"sort\": sort_type.value,\n}\nroute = endpoints.GET_SEASONAL_ANIME.generate_route(\nyear, season.value\n).with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_results(result.data))\n# Used when requesting specific fields is implemented\ndef _generate_fields_map(self, fields: list[Anime]) -&gt; dict[str, str]:\n\"\"\"Generate a dict of field params.\"\"\"\nreturn {\"fields\": \",\".join([f.value for f in fields])}\n</code></pre>"},{"location":"reference/services/#aniwrap.services.anime.AnimeService.get_anime","title":"get_anime  <code>async</code>","text":"<pre><code>get_anime(id: int | str) -&gt; ResultT[Anime]\n</code></pre> <p>Get details of anime by the anime id.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int | str</code> <p>The Id of the anime.</p> required <p>Returns:</p> Type Description <code>ResultT[Anime]</code> <p><code>Result</code> containing <code>Anime</code> on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.anime.get_anime(16498)\nif result.is_success:\nanime_details = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/anime.py</code> <pre><code>async def get_anime(self, id: int | str) -&gt; ResultT[Anime]:\n\"\"\"Get details of anime by the anime id.\n    Args:\n        id: The Id of the anime.\n    Returns:\n        [`Result`][aniwrap.Result] containing `Anime` on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.anime.get_anime(16498)\n        if result.is_success:\n            anime_details = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nparams = {\"fields\": self._fields}\nroute = endpoints.GET_ANIME.generate_route(id).with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.anime.AnimeService.get_anime_ranking","title":"get_anime_ranking  <code>async</code>","text":"<pre><code>get_anime_ranking(\nranking_type: AnimeRankingType,\n*,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; ResultT[list[AnimeRanking]]\n</code></pre> <p>Get different types of anime rankings.</p> <p>Parameters:</p> Name Type Description Default <code>ranking_type</code> <code>AnimeRankingType</code> <p>The type of ranking. Check enum <code>AnimeRankingType</code> for all the possible types.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>int | None</code> <p>The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100. Defaults to <code>10</code></p> <code>offset</code> <code>int | None</code> <p>The optional offset to use with requests, which specifies the offset from the start when fetching response. Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>ResultT[list[AnimeRanking]]</code> <p><code>Result</code> containing <code>list[AnimeRanking]</code> model on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.anime.get_anime_ranking(AnimeRankingType.All, limit=5, offset=0)\nif result.is_success:\nanime_list = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/anime.py</code> <pre><code>async def get_anime_ranking(\nself,\nranking_type: AnimeRankingType,\n*,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[AnimeRanking]]:\n\"\"\"Get different types of anime rankings.\n    Args:\n        ranking_type: The type of ranking. Check enum `AnimeRankingType` for all the possible types.\n    Keyword Args:\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[AnimeRanking]` model on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.anime.get_anime_ranking(AnimeRankingType.All, limit=5, offset=0)\n        if result.is_success:\n            anime_list = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"ranking_type\": ranking_type.value,\n}\nroute = endpoints.GET_ANIME_RANKING.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_ranking(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.anime.AnimeService.get_seasonal_anime","title":"get_seasonal_anime  <code>async</code>","text":"<pre><code>get_seasonal_anime(\nyear: int,\nseason: AnimeSeason,\n*,\nsort_type: AnimeSortType = AnimeSortType.AnimeScore,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; ResultT[list[Anime]]\n</code></pre> <p>Get anime by season and year.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>The year.</p> required <code>season</code> <code>AnimeSeason</code> <p>The anime season in the year.</p> required <p>Other Parameters:</p> Name Type Description <code>sort_type</code> <code>AnimeSortType</code> <p>The optional sort_type based on which the anime results will be sorted. Defaults to <code>AnimeSortType.AnimeScore</code>.</p> <code>limit</code> <code>int | None</code> <p>The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100. Defaults to <code>10</code></p> <code>offset</code> <code>int | None</code> <p>The optional offset to use with requests, which specifies the offset from the start when fetching response. Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>ResultT[list[Anime]]</code> <p><code>Result</code> containing <code>list[Anime]</code> model on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.anime.get_seasonal_anime(\n2020, AnimeSeason.Fall, sort_type=AnimeSortType.NumberOfUsers\n)\nif result.is_success:\nanime_list = result.value\nif result.is_error:\nerror = result.error\n</code></pre> Source code in <code>aniwrap/services/anime.py</code> <pre><code>async def get_seasonal_anime(\nself,\nyear: int,\nseason: AnimeSeason,\n*,\nsort_type: AnimeSortType = AnimeSortType.AnimeScore,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[Anime]]:\n\"\"\"Get anime by season and year.\n    Args:\n        year: The year.\n        season: The anime season in the year.\n    Keyword Args:\n        sort_type: The optional sort_type based on which the anime results will be sorted.\n            Defaults to `AnimeSortType.AnimeScore`.\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[Anime]` model on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.anime.get_seasonal_anime(\n            2020, AnimeSeason.Fall, sort_type=AnimeSortType.NumberOfUsers\n        )\n        if result.is_success:\n            anime_list = result.value\n        if result.is_error:\n            error = result.error\n        ```\n    \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"sort\": sort_type.value,\n}\nroute = endpoints.GET_SEASONAL_ANIME.generate_route(\nyear, season.value\n).with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_results(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.anime.AnimeService.search_anime","title":"search_anime  <code>async</code>","text":"<pre><code>search_anime(\nanime_name: str,\n*,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; ResultT[list[Anime]]\n</code></pre> <p>Search for anime by title.</p> <p>Parameters:</p> Name Type Description Default <code>anime_name</code> <code>str</code> <p>Title or name of the anime.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>int | None</code> <p>The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100. Defaults to <code>10</code></p> <code>offset</code> <code>int | None</code> <p>The optional offset to use with requests, which specifies the offset from the start when fetching response. Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>ResultT[list[Anime]]</code> <p><code>Result</code> containing <code>list[Anime]</code> on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.anime.search_anime(\"blue lock\", limit=5, offset=0)\nif result.is_success:\nanime_list = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/anime.py</code> <pre><code>async def search_anime(\nself, anime_name: str, *, limit: int | None = 10, offset: int | None = 0\n) -&gt; ResultT[list[Anime]]:\n\"\"\"Search for anime by title.\n    Args:\n        anime_name: Title or name of the anime.\n    Keyword Args:\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[Anime]` on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.anime.search_anime(\"blue lock\", limit=5, offset=0)\n        if result.is_success:\n            anime_list = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"q\": anime_name,\n}\nroute = endpoints.SEARCH_ANIME.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_results(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.BaseService","title":"BaseService","text":"<p>         Bases: <code>abc.ABC</code></p> <p>The base service from which all the other services inherit.</p> <p>Parameters:</p> Name Type Description Default <code>http_service</code> <code>HttpService</code> <p>The http service to use for requests.</p> required Source code in <code>aniwrap/services/base.py</code> <pre><code>class BaseService(abc.ABC):\n\"\"\"The base service from which all the other services inherit.\n    Args:\n        http_service: The http service to use for requests.\n    \"\"\"\n__slots__ = (\"_http\", \"_serializer\")\ndef __init__(\nself, http_service: HttpService, serializer: serializer.Serializer\n) -&gt; None:\nself._http = http_service\nself._serializer = serializer\n</code></pre>"},{"location":"reference/services/#aniwrap.services.ForumService","title":"ForumService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles all forum related methods.</p> Source code in <code>aniwrap/services/forum.py</code> <pre><code>class ForumService(BaseService):\n\"\"\"Handles all forum related methods.\"\"\"\n__slots__ = ()\nasync def get_forum_boards(self) -&gt; ResultT[list[Forum]]:\n\"\"\"Get list of all the fourm boards filtered by category.\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[Forum]` on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.forum.get_forum_boards()\n            if result.is_success:\n                boards = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nroute = endpoints.GET_FORUM_BOARDS.generate_route()\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_forum_board(c)\nfor c in result.data.get(\"categories\", [])\n]\n)\nasync def get_forum_topics(\nself,\n*,\nquery: str | None = None,\nboard_id: int | None = None,\nsubboard_id: int | None = None,\nlimit: int | None = 10,\noffset: int | None = 0,\ntopic_user_name: str | None = None,\nusername: str | None = None,\n) -&gt; ResultT[list[ForumTopic]]:\n\"\"\"Get topics by different parameters. At least one of the arguments must be specified.\n        Keyword Args:\n            query: The query parameter to search - usually matches the title of the topic\n                Defaults to `None`\n            board_id: The Id of specific board\n                Defaults to `None`\n            subboard_id: The Id of any specific sub board\n                Defaults to `None`\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n            topic_user_name: The username of the user that started the topic\n                Defaults to `None`\n            username: The username of the users that participated in the topic\n                Defaults to `None`\n        Returns:\n            [`Result`][aniwrap.Result] containing `ForumTopic` on success or error data on error.\n        Raises:\n            ValueError: When no arguments are given\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.forum.get_forum_topics(query=\"new anime\")\n            if result.is_success:\n                topics = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nif query or board_id or subboard_id or topic_user_name or username:\nparams = {\n\"q\": query if query else \"\",\n\"board_id\": board_id if board_id else \"\",\n\"subboard_id\": subboard_id if subboard_id else \"\",\n\"topic_user_name\": topic_user_name if topic_user_name else \"\",\n\"username\": username if username else \"\",\n\"limit\": limit,\n\"offset\": offset,\n}\nroute = endpoints.GET_FORUM_TOPICS.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_forum_topic(t)\nfor t in result.data.get(\"data\", [])\n]\n)\nelse:\nraise ValueError(\"Atleast one parameter must be specified.\")\nasync def get_forum_topic_details(\nself, topic_id: int, *, limit: int | None = 10, offset: int | None = 0\n) -&gt; ResultT[ForumTopicDetails]:\n\"\"\"Get topic details by topic id.\n        Args:\n            topic_id: The Id of the topic\n        Keyword Args:\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `ForumTopicDetails` on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.forum.get_forum_topic_details(2070198)\n            if result.is_success:\n                topic_details = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nparams = {\"limit\": limit, \"offset\": offset}\nroute = endpoints.GET_FORUM_TOPIC_DETAILS.generate_route(topic_id).with_params(\nparams\n)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\nself._serializer.deserialize_forum_topic_details(\nresult.data.get(\"data\", {})\n)\n)\n</code></pre>"},{"location":"reference/services/#aniwrap.services.forum.ForumService.get_forum_boards","title":"get_forum_boards  <code>async</code>","text":"<pre><code>get_forum_boards() -&gt; ResultT[list[Forum]]\n</code></pre> <p>Get list of all the fourm boards filtered by category.</p> <p>Returns:</p> Type Description <code>ResultT[list[Forum]]</code> <p><code>Result</code> containing <code>list[Forum]</code> on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.forum.get_forum_boards()\nif result.is_success:\nboards = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/forum.py</code> <pre><code>async def get_forum_boards(self) -&gt; ResultT[list[Forum]]:\n\"\"\"Get list of all the fourm boards filtered by category.\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[Forum]` on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.forum.get_forum_boards()\n        if result.is_success:\n            boards = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nroute = endpoints.GET_FORUM_BOARDS.generate_route()\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_forum_board(c)\nfor c in result.data.get(\"categories\", [])\n]\n)\n</code></pre>"},{"location":"reference/services/#aniwrap.services.forum.ForumService.get_forum_topic_details","title":"get_forum_topic_details  <code>async</code>","text":"<pre><code>get_forum_topic_details(\ntopic_id: int,\n*,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; ResultT[ForumTopicDetails]\n</code></pre> <p>Get topic details by topic id.</p> <p>Parameters:</p> Name Type Description Default <code>topic_id</code> <code>int</code> <p>The Id of the topic</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>int | None</code> <p>The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100. Defaults to <code>10</code></p> <code>offset</code> <code>int | None</code> <p>The optional offset to use with requests, which specifies the offset from the start when fetching response. Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>ResultT[ForumTopicDetails]</code> <p><code>Result</code> containing <code>ForumTopicDetails</code> on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.forum.get_forum_topic_details(2070198)\nif result.is_success:\ntopic_details = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/forum.py</code> <pre><code>async def get_forum_topic_details(\nself, topic_id: int, *, limit: int | None = 10, offset: int | None = 0\n) -&gt; ResultT[ForumTopicDetails]:\n\"\"\"Get topic details by topic id.\n    Args:\n        topic_id: The Id of the topic\n    Keyword Args:\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `ForumTopicDetails` on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.forum.get_forum_topic_details(2070198)\n        if result.is_success:\n            topic_details = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nparams = {\"limit\": limit, \"offset\": offset}\nroute = endpoints.GET_FORUM_TOPIC_DETAILS.generate_route(topic_id).with_params(\nparams\n)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\nself._serializer.deserialize_forum_topic_details(\nresult.data.get(\"data\", {})\n)\n)\n</code></pre>"},{"location":"reference/services/#aniwrap.services.forum.ForumService.get_forum_topics","title":"get_forum_topics  <code>async</code>","text":"<pre><code>get_forum_topics(\n*,\nquery: str | None = None,\nboard_id: int | None = None,\nsubboard_id: int | None = None,\nlimit: int | None = 10,\noffset: int | None = 0,\ntopic_user_name: str | None = None,\nusername: str | None = None\n) -&gt; ResultT[list[ForumTopic]]\n</code></pre> <p>Get topics by different parameters. At least one of the arguments must be specified.</p> <p>Other Parameters:</p> Name Type Description <code>query</code> <code>str | None</code> <p>The query parameter to search - usually matches the title of the topic Defaults to <code>None</code></p> <code>board_id</code> <code>int | None</code> <p>The Id of specific board Defaults to <code>None</code></p> <code>subboard_id</code> <code>int | None</code> <p>The Id of any specific sub board Defaults to <code>None</code></p> <code>limit</code> <code>int | None</code> <p>The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100. Defaults to <code>10</code></p> <code>offset</code> <code>int | None</code> <p>The optional offset to use with requests, which specifies the offset from the start when fetching response. Defaults to <code>0</code></p> <code>topic_user_name</code> <code>str | None</code> <p>The username of the user that started the topic Defaults to <code>None</code></p> <code>username</code> <code>str | None</code> <p>The username of the users that participated in the topic Defaults to <code>None</code></p> <p>Returns:</p> Type Description <code>ResultT[list[ForumTopic]]</code> <p><code>Result</code> containing <code>ForumTopic</code> on success or error data on error.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When no arguments are given</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.forum.get_forum_topics(query=\"new anime\")\nif result.is_success:\ntopics = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/forum.py</code> <pre><code>async def get_forum_topics(\nself,\n*,\nquery: str | None = None,\nboard_id: int | None = None,\nsubboard_id: int | None = None,\nlimit: int | None = 10,\noffset: int | None = 0,\ntopic_user_name: str | None = None,\nusername: str | None = None,\n) -&gt; ResultT[list[ForumTopic]]:\n\"\"\"Get topics by different parameters. At least one of the arguments must be specified.\n    Keyword Args:\n        query: The query parameter to search - usually matches the title of the topic\n            Defaults to `None`\n        board_id: The Id of specific board\n            Defaults to `None`\n        subboard_id: The Id of any specific sub board\n            Defaults to `None`\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n        topic_user_name: The username of the user that started the topic\n            Defaults to `None`\n        username: The username of the users that participated in the topic\n            Defaults to `None`\n    Returns:\n        [`Result`][aniwrap.Result] containing `ForumTopic` on success or error data on error.\n    Raises:\n        ValueError: When no arguments are given\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.forum.get_forum_topics(query=\"new anime\")\n        if result.is_success:\n            topics = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nif query or board_id or subboard_id or topic_user_name or username:\nparams = {\n\"q\": query if query else \"\",\n\"board_id\": board_id if board_id else \"\",\n\"subboard_id\": subboard_id if subboard_id else \"\",\n\"topic_user_name\": topic_user_name if topic_user_name else \"\",\n\"username\": username if username else \"\",\n\"limit\": limit,\n\"offset\": offset,\n}\nroute = endpoints.GET_FORUM_TOPICS.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_forum_topic(t)\nfor t in result.data.get(\"data\", [])\n]\n)\nelse:\nraise ValueError(\"Atleast one parameter must be specified.\")\n</code></pre>"},{"location":"reference/services/#aniwrap.services.HttpService","title":"HttpService","text":"<p>The HTTP service that is used to make requests to MAL API.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str | None</code> <p>X-MAL-CLIENT-ID.</p> <code>None</code> Source code in <code>aniwrap/services/http.py</code> <pre><code>class HttpService:\n\"\"\"The HTTP service that is used to make requests to MAL API.\n    Args:\n        client_id: X-MAL-CLIENT-ID.\n    \"\"\"\n__slots__ = (\"_headers\", \"_session\", \"_method_mapping\")\ndef __init__(\nself, client_id: str | None = None, access_token: str | None = None\n) -&gt; None:\nself._set_headers(client_id, access_token)\nself._session = aiohttp.ClientSession()\ndef _set_headers(\nself, client_id: str | None = None, access_token: str | None = None\n) -&gt; None:\n\"\"\"Set headers - either client_id or bearer token\"\"\"\nif not client_id and not access_token:\nraise ValueError(\"Either Client id or bearer token need to be specified.\")\nif client_id:\nself._headers = {\"X-MAL-CLIENT-ID\": client_id}\nif access_token:\nself._headers = {\"Authorization\": f\"Bearer {access_token}\"}\ndef _get_session_method(self, method: HttpMethod, session: Any) -&gt; Any:\n\"\"\"Get the session with method type.\n        Returns:\n            The session with respective method.\n        \"\"\"\n_method_mapping = {\nHttpMethod.Get: session.get,\nHttpMethod.Post: session.post,\nHttpMethod.Put: session.put,\nHttpMethod.Patch: session.patch,\nHttpMethod.Delete: session.delete,\n}\nreturn _method_mapping[method]\nasync def _request(\nself,\nsession: Any,\nuri: str,\nparams: dict[str, str | int],\ndata: dict[str, str | int],\n) -&gt; HttpErrorResponse | HttpSuccessResponse:\n\"\"\"Make the actual request to the MAL API based on given params.\n        Returns:\n            The response from the API call.\n        \"\"\"\ntry:\nasync with session(\nuri, headers=self._headers, params=params, data=data\n) as r:\nresponse = await r.json()\nif r.status == 200:\nreturn HttpSuccessResponse(r.status, \"Success.\", response)\nreturn HttpErrorResponse(r.status, response.get(\"error\"))\nexcept Exception as e:\nreturn HttpErrorResponse(500, str(e))\nasync def fetch(\nself, route: GenerateRoute, method: HttpMethod\n) -&gt; HttpErrorResponse | HttpSuccessResponse:\n\"\"\"Makes a request to the given route.\n        Returns:\n            The HTTP response [`HttpSuccessResponse`] or [`HttpErrorResponse`] of the API call.\n        \"\"\"\ntry:\n# async with self._session as session:\nreturn await self._request(\nself._get_session_method(method, self._session),\nroute.uri,\nroute.params,\nroute.data,\n)\nexcept Exception as e:\nreturn HttpErrorResponse(500, str(e))\nasync def close(self) -&gt; None:\n\"\"\"Close the open aiohttp clientsession.\"\"\"\nif self._session and not self._session.closed:\nawait self._session.close()\n</code></pre>"},{"location":"reference/services/#aniwrap.services.http.HttpService.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Close the open aiohttp clientsession.</p> Source code in <code>aniwrap/services/http.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Close the open aiohttp clientsession.\"\"\"\nif self._session and not self._session.closed:\nawait self._session.close()\n</code></pre>"},{"location":"reference/services/#aniwrap.services.http.HttpService.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch(\nroute: GenerateRoute, method: HttpMethod\n) -&gt; HttpErrorResponse | HttpSuccessResponse\n</code></pre> <p>Makes a request to the given route.</p> <p>Returns:</p> Type Description <code>HttpErrorResponse | HttpSuccessResponse</code> <p>The HTTP response [<code>HttpSuccessResponse</code>] or [<code>HttpErrorResponse</code>] of the API call.</p> Source code in <code>aniwrap/services/http.py</code> <pre><code>async def fetch(\nself, route: GenerateRoute, method: HttpMethod\n) -&gt; HttpErrorResponse | HttpSuccessResponse:\n\"\"\"Makes a request to the given route.\n    Returns:\n        The HTTP response [`HttpSuccessResponse`] or [`HttpErrorResponse`] of the API call.\n    \"\"\"\ntry:\n# async with self._session as session:\nreturn await self._request(\nself._get_session_method(method, self._session),\nroute.uri,\nroute.params,\nroute.data,\n)\nexcept Exception as e:\nreturn HttpErrorResponse(500, str(e))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.MangaService","title":"MangaService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles all methods related to Manga.</p> Source code in <code>aniwrap/services/manga.py</code> <pre><code>class MangaService(BaseService):\n\"\"\"Handles all methods related to Manga.\"\"\"\n_fields = \"id,title,main_picture,alternative_titles,start_date,end_date,synopsis,mean,rank,popularity,num_list_users,num_scoring_users,nsfw,created_at,updated_at,media_type,status,genres,my_list_status,num_volumes,num_chapters,authors{first_name,last_name},pictures,background,related_anime,related_manga,recommendations,serialization\"\n__slots__ = ()\nasync def search_manga(\nself, manga_name: str, *, limit: int | None = 10, offset: int | None = 0\n) -&gt; ResultT[list[Manga]]:\n\"\"\"Search for Manga by title.\n        Args:\n            manga_name: Title or name of the manga.\n        Keyword Args:\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[Manga]` on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.manga.search_manga(\"shingeki no kyojin\", limit=5, offset=0)\n            if result.is_success:\n                manga_list = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"q\": manga_name,\n}\nroute = endpoints.SEARCH_MANGA.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga_results(result.data))\nasync def get_manga(self, id: int | str) -&gt; ResultT[Manga]:\n\"\"\"Get details of manga by the manga id.\n        Args:\n            id: The Id of the manga.\n        Returns:\n            [`Result`][aniwrap.Result] containing `Manga` on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.manga.get_manga(23390)\n            if result.is_success:\n                manga_details = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nparams = {\"fields\": self._fields}\nroute = endpoints.GET_MANGA.generate_route(id).with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga(result.data))\nasync def get_manga_ranking(\nself,\nranking_type: MangaRankingType,\n*,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; Result[list[MangaRanking]]:\n\"\"\"Get different types of manga rankings.\n        Args:\n            ranking_type: The type of ranking. Check enum `MangaRankingType` for all the possible types.\n        Keyword Args:\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[MangaRanking]` model on success or error data on error.\n        ??? example\n            ```py\n            import aniwrap\n            client = aniwrap.Client(...)\n            result = await client.manga.get_manga_ranking(MangaRankingType.ByPopularity, limit=5, offset=0)\n            if result.is_success:\n                manga_list = result.value\n            if result.is_error:\n                error = result.error\n            await client.close()\n            ```\n        \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"ranking_type\": ranking_type.value,\n}\nroute = endpoints.GET_MANGA_RANKING.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga_ranking(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.manga.MangaService.get_manga","title":"get_manga  <code>async</code>","text":"<pre><code>get_manga(id: int | str) -&gt; ResultT[Manga]\n</code></pre> <p>Get details of manga by the manga id.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int | str</code> <p>The Id of the manga.</p> required <p>Returns:</p> Type Description <code>ResultT[Manga]</code> <p><code>Result</code> containing <code>Manga</code> on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.manga.get_manga(23390)\nif result.is_success:\nmanga_details = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/manga.py</code> <pre><code>async def get_manga(self, id: int | str) -&gt; ResultT[Manga]:\n\"\"\"Get details of manga by the manga id.\n    Args:\n        id: The Id of the manga.\n    Returns:\n        [`Result`][aniwrap.Result] containing `Manga` on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.manga.get_manga(23390)\n        if result.is_success:\n            manga_details = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nparams = {\"fields\": self._fields}\nroute = endpoints.GET_MANGA.generate_route(id).with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.manga.MangaService.get_manga_ranking","title":"get_manga_ranking  <code>async</code>","text":"<pre><code>get_manga_ranking(\nranking_type: MangaRankingType,\n*,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; Result[list[MangaRanking]]\n</code></pre> <p>Get different types of manga rankings.</p> <p>Parameters:</p> Name Type Description Default <code>ranking_type</code> <code>MangaRankingType</code> <p>The type of ranking. Check enum <code>MangaRankingType</code> for all the possible types.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>int | None</code> <p>The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100. Defaults to <code>10</code></p> <code>offset</code> <code>int | None</code> <p>The optional offset to use with requests, which specifies the offset from the start when fetching response. Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>Result[list[MangaRanking]]</code> <p><code>Result</code> containing <code>list[MangaRanking]</code> model on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.manga.get_manga_ranking(MangaRankingType.ByPopularity, limit=5, offset=0)\nif result.is_success:\nmanga_list = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/manga.py</code> <pre><code>async def get_manga_ranking(\nself,\nranking_type: MangaRankingType,\n*,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; Result[list[MangaRanking]]:\n\"\"\"Get different types of manga rankings.\n    Args:\n        ranking_type: The type of ranking. Check enum `MangaRankingType` for all the possible types.\n    Keyword Args:\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[MangaRanking]` model on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.manga.get_manga_ranking(MangaRankingType.ByPopularity, limit=5, offset=0)\n        if result.is_success:\n            manga_list = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"ranking_type\": ranking_type.value,\n}\nroute = endpoints.GET_MANGA_RANKING.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga_ranking(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.manga.MangaService.search_manga","title":"search_manga  <code>async</code>","text":"<pre><code>search_manga(\nmanga_name: str,\n*,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; ResultT[list[Manga]]\n</code></pre> <p>Search for Manga by title.</p> <p>Parameters:</p> Name Type Description Default <code>manga_name</code> <code>str</code> <p>Title or name of the manga.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>int | None</code> <p>The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100. Defaults to <code>10</code></p> <code>offset</code> <code>int | None</code> <p>The optional offset to use with requests, which specifies the offset from the start when fetching response. Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>ResultT[list[Manga]]</code> <p><code>Result</code> containing <code>list[Manga]</code> on success or error data on error.</p> Example <pre><code>import aniwrap\nclient = aniwrap.Client(...)\nresult = await client.manga.search_manga(\"shingeki no kyojin\", limit=5, offset=0)\nif result.is_success:\nmanga_list = result.value\nif result.is_error:\nerror = result.error\nawait client.close()\n</code></pre> Source code in <code>aniwrap/services/manga.py</code> <pre><code>async def search_manga(\nself, manga_name: str, *, limit: int | None = 10, offset: int | None = 0\n) -&gt; ResultT[list[Manga]]:\n\"\"\"Search for Manga by title.\n    Args:\n        manga_name: Title or name of the manga.\n    Keyword Args:\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[Manga]` on success or error data on error.\n    ??? example\n        ```py\n        import aniwrap\n        client = aniwrap.Client(...)\n        result = await client.manga.search_manga(\"shingeki no kyojin\", limit=5, offset=0)\n        if result.is_success:\n            manga_list = result.value\n        if result.is_error:\n            error = result.error\n        await client.close()\n        ```\n    \"\"\"\nparams = {\n\"fields\": self._fields,\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n\"q\": manga_name,\n}\nroute = endpoints.SEARCH_MANGA.generate_route().with_params(params)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga_results(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.UserService","title":"UserService","text":"<p>         Bases: <code>BaseService</code></p> <p>Hanldes all the methods related to user Anime and Manga.</p> Source code in <code>aniwrap/services/user.py</code> <pre><code>class UserService(BaseService):\n\"\"\"Hanldes all the methods related to user Anime and Manga.\"\"\"\n__slots__ = ()\n_anime_fields = \"id,title,main_picture,alternative_titles,start_date,end_date,synopsis,mean,rank,popularity,num_list_users,num_scoring_users,nsfw,created_at,updated_at,media_type,status,genres,num_episodes,start_season,broadcast,source,average_episode_duration,rating,pictures,background,related_anime,related_manga,recommendations,studios,statistics,list_status\"\n_manga_fields = \"id,title,main_picture,alternative_titles,start_date,end_date,synopsis,mean,rank,popularity,num_list_users,num_scoring_users,nsfw,created_at,updated_at,media_type,status,genres,my_list_status,num_volumes,num_chapters,authors{first_name,last_name},pictures,background,related_anime,related_manga,recommendations,serialization,list_status\"\n# region anime\nasync def get_anime_list(\nself,\nusername: str,\n*,\nstatus: AnimeWatchStatus | None = None,\nsort: AnimeListSortType | None = None,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[AnimeList]]:\n\"\"\"Get anime list of a user by username.\n        Args:\n            username: The username of the user.\n        KeywordArgs:\n            status: The optional status based on which the results will be filtered. If not specified, the result will contain anime with all the status.\n                Defaults to `None`.\n            sort: The optional sort filter based on which the results will be sorted. If not specified, by default the results will be sorted in the descending order of last updated date.\n                Defaults to `None`.\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[AnimeList]` model on success or [`HttpErrorResponse`] data on error.\n        ??? example\n            ```py\n            import aniwrap\n            user_client = aniwrap.UserClient(...)\n            result = await user_client.user.get_anime_list(\"your-user-name\")\n            if result.is_success:\n                anime_list = result.value\n            if result.is_error:\n                error = result.error\n            await user_client.close()\n            ```\n        \"\"\"\nparams = {\n\"fields\": self._anime_fields,\n\"status\": status.value if status else \"\",\n\"sort\": sort.value if sort else \"\",\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n}\nroute = endpoints.GET_USER_ANIME_LIST.generate_route(username).with_params(\nparams\n)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_user_anime_list(a)\nfor a in result.data.get(\"data\", [])\n]\n)\nasync def update_anime_list(\nself,\nanime_id: int,\n*,\nstatus: AnimeWatchStatus | None = None,\nis_rewatching: bool | None = None,\nscore: int | None = None,\nnum_watched_episodes: int | None = None,\npriority: ListPriority | None = None,\nnum_times_rewatched: int | None = None,\nrewatch_value: AnimeRewatchValue | None = None,\ntags: str | None = None,\ncomments: str | None = None,\n) -&gt; ResultT[AnimeListUpdate]:\n\"\"\"Update anime details in user anime list. If the anime doesn't already exists, this will add the anime to the list.\n            Only specify the params that need to be updated.\n        Args:\n            anime_id: The id of the anime.\n        Keyword Args:\n            status: The watch status of the anime.\n            is_rewatching: The rewatching status of the anime.\n            score: The score of the anime. Score should be in between 0 and 10.\n            num_watched_episodes: The number of episodes watched.\n            priority: The priority of the anime in the user list.\n            num_times_rewatched: The number of times rewatched.\n            rewatch_value: The rewatch value of the anime.\n            tags: The tags that need to be added.\n            comments: The user comments.\n        Returns:\n            [`Result`][aniwrap.Result] containing [`AnimeListUpdate`][aniwrap.AnimeListUpdate] model on success or `HttpErrorResponse` data on error.\n            `HttpErrorResponse.status` will be `404` if no anime with the provided anime_id contains on MAL.\n        ??? example\n            ```py\n            import aniwrap\n            user_client = aniwrap.UserClient(...)\n            result = await user_client.user.update_anime_list(5114, score=8)\n            if result.is_success:\n                anime_list_update = result.value\n            if result.is_error:\n                error = result.error\n            await user_client.close()\n            ```\n        \"\"\"\ndata = self._generate_data_map(\nstatus=status,\nis_rewatching=is_rewatching,\nscore=None\nif not score\nelse 10\nif score &gt; 10\nelse 0\nif score &lt; 0\nelse score,\nnum_watched_episodes=num_watched_episodes,\npriority=priority.value if priority else None,\nnum_times_rewatched=num_times_rewatched,\nrewatch_value=rewatch_value.value if rewatch_value else None,\ntags=tags,\ncomments=comments,\n)\nroute = endpoints.UPDATE_USER_ANIME_LIST.generate_route(anime_id).with_data(\ndata\n)\nresult = await self._http.fetch(route, HttpMethod.Patch)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_list_update(result.data))\nasync def delete_anime_from_list(self, anime_id: str) -&gt; ResultT[str]:\n\"\"\"Delete an anime from user's list.\n        Args:\n            anime_id: The Id of the anime to be deleted from the list.\n        Returns:\n            [`Result`][aniwrap.Result] containing `str` with success message on success or [`HttpErrorResponse`] data on error. [`HttpErrorResponse.status`] will be `404` if no anime with the provided anime_id contains on MAL.\n        ??? example\n            ```py\n            import aniwrap\n            user_client = aniwrap.UserClient(...)\n            result = await user_client.user.delete_anime_from_list(52034)\n            if result.is_success:\n                print(\"deleted\")\n            if result.is_error:\n                error = result.error\n            await user_client.close()\n            ```\n        \"\"\"\nroute = endpoints.DELETE_ANIME_FROM_LIST.generate_route(anime_id)\nresult = await self._http.fetch(route, HttpMethod.Delete)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\"Succesfully deleted anime from the list.\")\n# endregion\n# region manga\nasync def get_manga_list(\nself,\nusername: str,\n*,\nstatus: MangaReadStatus | None = None,\nsort: MangaListSortType | None = None,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[MangaList]]:\n\"\"\"Get the manga list of a user by user name.\n        Args:\n            username: The user name of the user.\n        KeywordArgs:\n            status: The status with which the list need to be filtered. If specified, the result will only contain manga of this status.\n                Defaults to `None` and result contains manga of all status'.\n            sort: The type of sorting on the manga list.\n                Defaults to `None`.\n            limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n                Defaults to `10`\n            offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n                Defaults to `0`\n        Returns:\n            [`Result`][aniwrap.Result] containing `list[MangaList]` model on success or [`HttpErrorResponse`] data on error.\n        ??? example\n            ```py\n            import aniwrap\n            user_client = aniwrap.UserClient(...)\n            result = await await user_client.user.get_manga_list(\"your-user-name\")\n            if result.is_success:\n                manga_list = result.value\n            if result.is_error:\n                error = result.error\n            await user_client.close()\n            ```\n        \"\"\"\nparams = {\n\"fields\": self._manga_fields,\n\"status\": status.value if status else \"\",\n\"sort\": sort.value if sort else \"\",\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n}\nroute = endpoints.GET_USER_MANGA_LIST.generate_route(username).with_params(\nparams\n)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_user_manga_list(m)\nfor m in result.data.get(\"data\", [])\n]\n)\nasync def update_manga_list(\nself,\nmanga_id: str,\n*,\nstatus: MangaReadStatus | None = None,\nis_rereading: bool | None = None,\nscore: int | None = None,\nnum_volumes_read: int | None = None,\nnum_chapters_read: int | None = None,\npriority: ListPriority | None = None,\nnum_times_reread: int | None = None,\nreread_value: MangaRereadValue | None = None,\ntags: str | None = None,\ncomments: str | None = None,\n) -&gt; ResultT[MangaListUpdate]:\n\"\"\"Update manga details in user manga list. If the manga doesn't already exists, this will add the manga to the list.\n            Only specify the params that need to be updated/added.\n        Args:\n            manga_id: The id of the manga.\n        Keyword Args:\n            status: The Read status of the manga.\n            is_rereading: The rereading status of the manga.\n            score: The score of the manga. Score should be in between 0 and 10.\n            num_volumes_read: The number of volumes read.\n            num_chapters_read: The number of chapters read.\n            priority: The priority of the manga in the user list.\n            num_times_reread: The number of times reread.\n            reread_value: The reread value of the manga.\n            tags: The tags that need to be added.\n            comments: The user comments.\n        Returns:\n            [`Result`][aniwrap.Result] containing [`MangaListUpdate`][aniwrap.MangaListUpdate] model on success or `HttpErrorResponse` data on error.\n            `HttpErrorResponse.status` will be `404` if no manga with the provided manga_id contains on MAL.\n        ??? example\n            ```py\n            import aniwrap\n            user_client = aniwrap.UserClient(...)\n            result = await user_client.user.update_manga_list(13759, status=MangaReadStatus.PlanToRead)\n            if result.is_success:\n                manga_list_update = result.value\n            if result.is_error:\n                error = result.error\n            await user_client.close()\n            ```\n        \"\"\"\ndata = self._generate_data_map(\nstatus=status,\nis_rereading=is_rereading,\nscore=None\nif not score\nelse 10\nif score &gt; 10\nelse 0\nif score &lt; 0\nelse score,\nnum_volumes_read=num_volumes_read,\nnum_chapters_read=num_chapters_read,\npriority=priority.value if priority else None,\nnum_times_reread=num_times_reread,\nreread_value=reread_value.value if reread_value else None,\ntags=tags,\ncomments=comments,\n)\nroute = endpoints.UPATE_USER_MANGA_LIST.generate_route(manga_id).with_data(data)\nresult = await self._http.fetch(route, HttpMethod.Patch)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga_list_update(result.data))\nasync def delete_manga_from_list(self, manga_id: str) -&gt; ResultT[str]:\n\"\"\"Delete an manga from user's list.\n        Args:\n            manga_id: The Id of the manga to be deleted from the list.\n        Returns:\n            [`Result`][aniwrap.Result] containing `str` with success message on success or [`HttpErrorResponse`] data on error. [`HttpErrorResponse.status`] will be `404` if no anime with the provided manga_id contains on MAL.\n        ??? example\n            ```py\n            import aniwrap\n            user_client = aniwrap.UserClient(...)\n            result = await user_client.user.delete_manga_from_list(13759)\n            if result.is_success:\n                print(\"deleted\")\n            if result.is_error:\n                error = result.error\n            await user_client.close()\n            ```\n        \"\"\"\nroute = endpoints.DELETE_MANGA_FROM_LIST.generate_route(manga_id)\nresult = await self._http.fetch(route, HttpMethod.Delete)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\"Succesfully deleted manga from the list.\")\n# endregion\ndef _generate_data_map(self, **kwargs) -&gt; dict[str, Any]:\n\"\"\"Generarates a dict from input keyword args.\"\"\"\ndata = {}\nfor key, value in kwargs.items():\nif value:\ndata[key] = value\nreturn data\n</code></pre>"},{"location":"reference/services/#aniwrap.services.user.UserService.delete_anime_from_list","title":"delete_anime_from_list  <code>async</code>","text":"<pre><code>delete_anime_from_list(anime_id: str) -&gt; ResultT[str]\n</code></pre> <p>Delete an anime from user's list.</p> <p>Parameters:</p> Name Type Description Default <code>anime_id</code> <code>str</code> <p>The Id of the anime to be deleted from the list.</p> required <p>Returns:</p> Type Description <code>ResultT[str]</code> <p><code>Result</code> containing <code>str</code> with success message on success or [<code>HttpErrorResponse</code>] data on error. [<code>HttpErrorResponse.status</code>] will be <code>404</code> if no anime with the provided anime_id contains on MAL.</p> Example <pre><code>import aniwrap\nuser_client = aniwrap.UserClient(...)\nresult = await user_client.user.delete_anime_from_list(52034)\nif result.is_success:\nprint(\"deleted\")\nif result.is_error:\nerror = result.error\nawait user_client.close()\n</code></pre> Source code in <code>aniwrap/services/user.py</code> <pre><code>async def delete_anime_from_list(self, anime_id: str) -&gt; ResultT[str]:\n\"\"\"Delete an anime from user's list.\n    Args:\n        anime_id: The Id of the anime to be deleted from the list.\n    Returns:\n        [`Result`][aniwrap.Result] containing `str` with success message on success or [`HttpErrorResponse`] data on error. [`HttpErrorResponse.status`] will be `404` if no anime with the provided anime_id contains on MAL.\n    ??? example\n        ```py\n        import aniwrap\n        user_client = aniwrap.UserClient(...)\n        result = await user_client.user.delete_anime_from_list(52034)\n        if result.is_success:\n            print(\"deleted\")\n        if result.is_error:\n            error = result.error\n        await user_client.close()\n        ```\n    \"\"\"\nroute = endpoints.DELETE_ANIME_FROM_LIST.generate_route(anime_id)\nresult = await self._http.fetch(route, HttpMethod.Delete)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\"Succesfully deleted anime from the list.\")\n</code></pre>"},{"location":"reference/services/#aniwrap.services.user.UserService.delete_manga_from_list","title":"delete_manga_from_list  <code>async</code>","text":"<pre><code>delete_manga_from_list(manga_id: str) -&gt; ResultT[str]\n</code></pre> <p>Delete an manga from user's list.</p> <p>Parameters:</p> Name Type Description Default <code>manga_id</code> <code>str</code> <p>The Id of the manga to be deleted from the list.</p> required <p>Returns:</p> Type Description <code>ResultT[str]</code> <p><code>Result</code> containing <code>str</code> with success message on success or [<code>HttpErrorResponse</code>] data on error. [<code>HttpErrorResponse.status</code>] will be <code>404</code> if no anime with the provided manga_id contains on MAL.</p> Example <pre><code>import aniwrap\nuser_client = aniwrap.UserClient(...)\nresult = await user_client.user.delete_manga_from_list(13759)\nif result.is_success:\nprint(\"deleted\")\nif result.is_error:\nerror = result.error\nawait user_client.close()\n</code></pre> Source code in <code>aniwrap/services/user.py</code> <pre><code>async def delete_manga_from_list(self, manga_id: str) -&gt; ResultT[str]:\n\"\"\"Delete an manga from user's list.\n    Args:\n        manga_id: The Id of the manga to be deleted from the list.\n    Returns:\n        [`Result`][aniwrap.Result] containing `str` with success message on success or [`HttpErrorResponse`] data on error. [`HttpErrorResponse.status`] will be `404` if no anime with the provided manga_id contains on MAL.\n    ??? example\n        ```py\n        import aniwrap\n        user_client = aniwrap.UserClient(...)\n        result = await user_client.user.delete_manga_from_list(13759)\n        if result.is_success:\n            print(\"deleted\")\n        if result.is_error:\n            error = result.error\n        await user_client.close()\n        ```\n    \"\"\"\nroute = endpoints.DELETE_MANGA_FROM_LIST.generate_route(manga_id)\nresult = await self._http.fetch(route, HttpMethod.Delete)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\"Succesfully deleted manga from the list.\")\n</code></pre>"},{"location":"reference/services/#aniwrap.services.user.UserService.get_anime_list","title":"get_anime_list  <code>async</code>","text":"<pre><code>get_anime_list(\nusername: str,\n*,\nstatus: AnimeWatchStatus | None = None,\nsort: AnimeListSortType | None = None,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; ResultT[list[AnimeList]]\n</code></pre> <p>Get anime list of a user by username.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user.</p> required KeywordArgs <p>status: The optional status based on which the results will be filtered. If not specified, the result will contain anime with all the status.     Defaults to <code>None</code>.</p> <p>sort: The optional sort filter based on which the results will be sorted. If not specified, by default the results will be sorted in the descending order of last updated date.     Defaults to <code>None</code>.</p> <p>limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.     Defaults to <code>10</code></p> <p>offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.     Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>ResultT[list[AnimeList]]</code> <p><code>Result</code> containing <code>list[AnimeList]</code> model on success or [<code>HttpErrorResponse</code>] data on error.</p> Example <pre><code>import aniwrap\nuser_client = aniwrap.UserClient(...)\nresult = await user_client.user.get_anime_list(\"your-user-name\")\nif result.is_success:\nanime_list = result.value\nif result.is_error:\nerror = result.error\nawait user_client.close()\n</code></pre> Source code in <code>aniwrap/services/user.py</code> <pre><code>async def get_anime_list(\nself,\nusername: str,\n*,\nstatus: AnimeWatchStatus | None = None,\nsort: AnimeListSortType | None = None,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[AnimeList]]:\n\"\"\"Get anime list of a user by username.\n    Args:\n        username: The username of the user.\n    KeywordArgs:\n        status: The optional status based on which the results will be filtered. If not specified, the result will contain anime with all the status.\n            Defaults to `None`.\n        sort: The optional sort filter based on which the results will be sorted. If not specified, by default the results will be sorted in the descending order of last updated date.\n            Defaults to `None`.\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[AnimeList]` model on success or [`HttpErrorResponse`] data on error.\n    ??? example\n        ```py\n        import aniwrap\n        user_client = aniwrap.UserClient(...)\n        result = await user_client.user.get_anime_list(\"your-user-name\")\n        if result.is_success:\n            anime_list = result.value\n        if result.is_error:\n            error = result.error\n        await user_client.close()\n        ```\n    \"\"\"\nparams = {\n\"fields\": self._anime_fields,\n\"status\": status.value if status else \"\",\n\"sort\": sort.value if sort else \"\",\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n}\nroute = endpoints.GET_USER_ANIME_LIST.generate_route(username).with_params(\nparams\n)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_user_anime_list(a)\nfor a in result.data.get(\"data\", [])\n]\n)\n</code></pre>"},{"location":"reference/services/#aniwrap.services.user.UserService.get_manga_list","title":"get_manga_list  <code>async</code>","text":"<pre><code>get_manga_list(\nusername: str,\n*,\nstatus: MangaReadStatus | None = None,\nsort: MangaListSortType | None = None,\nlimit: int | None = 10,\noffset: int | None = 0\n) -&gt; ResultT[list[MangaList]]\n</code></pre> <p>Get the manga list of a user by user name.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The user name of the user.</p> required KeywordArgs <p>status: The status with which the list need to be filtered. If specified, the result will only contain manga of this status.     Defaults to <code>None</code> and result contains manga of all status'.</p> <p>sort: The type of sorting on the manga list.     Defaults to <code>None</code>.</p> <p>limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.     Defaults to <code>10</code></p> <p>offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.     Defaults to <code>0</code></p> <p>Returns:</p> Type Description <code>ResultT[list[MangaList]]</code> <p><code>Result</code> containing <code>list[MangaList]</code> model on success or [<code>HttpErrorResponse</code>] data on error.</p> Example <pre><code>import aniwrap\nuser_client = aniwrap.UserClient(...)\nresult = await await user_client.user.get_manga_list(\"your-user-name\")\nif result.is_success:\nmanga_list = result.value\nif result.is_error:\nerror = result.error\nawait user_client.close()\n</code></pre> Source code in <code>aniwrap/services/user.py</code> <pre><code>async def get_manga_list(\nself,\nusername: str,\n*,\nstatus: MangaReadStatus | None = None,\nsort: MangaListSortType | None = None,\nlimit: int | None = 10,\noffset: int | None = 0,\n) -&gt; ResultT[list[MangaList]]:\n\"\"\"Get the manga list of a user by user name.\n    Args:\n        username: The user name of the user.\n    KeywordArgs:\n        status: The status with which the list need to be filtered. If specified, the result will only contain manga of this status.\n            Defaults to `None` and result contains manga of all status'.\n        sort: The type of sorting on the manga list.\n            Defaults to `None`.\n        limit: The optional limit to use with requests, which specifies the number of results in the response. Should be between 1 and 100.\n            Defaults to `10`\n        offset: The optional offset to use with requests, which specifies the offset from the start when fetching response.\n            Defaults to `0`\n    Returns:\n        [`Result`][aniwrap.Result] containing `list[MangaList]` model on success or [`HttpErrorResponse`] data on error.\n    ??? example\n        ```py\n        import aniwrap\n        user_client = aniwrap.UserClient(...)\n        result = await await user_client.user.get_manga_list(\"your-user-name\")\n        if result.is_success:\n            manga_list = result.value\n        if result.is_error:\n            error = result.error\n        await user_client.close()\n        ```\n    \"\"\"\nparams = {\n\"fields\": self._manga_fields,\n\"status\": status.value if status else \"\",\n\"sort\": sort.value if sort else \"\",\n\"limit\": 100 if limit &gt; 100 else limit,\n\"offset\": 0 if offset &lt; 0 else offset,\n}\nroute = endpoints.GET_USER_MANGA_LIST.generate_route(username).with_params(\nparams\n)\nresult = await self._http.fetch(route, HttpMethod.Get)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(\n[\nself._serializer.deserialize_user_manga_list(m)\nfor m in result.data.get(\"data\", [])\n]\n)\n</code></pre>"},{"location":"reference/services/#aniwrap.services.user.UserService.update_anime_list","title":"update_anime_list  <code>async</code>","text":"<pre><code>update_anime_list(\nanime_id: int,\n*,\nstatus: AnimeWatchStatus | None = None,\nis_rewatching: bool | None = None,\nscore: int | None = None,\nnum_watched_episodes: int | None = None,\npriority: ListPriority | None = None,\nnum_times_rewatched: int | None = None,\nrewatch_value: AnimeRewatchValue | None = None,\ntags: str | None = None,\ncomments: str | None = None\n) -&gt; ResultT[AnimeListUpdate]\n</code></pre> <p>Update anime details in user anime list. If the anime doesn't already exists, this will add the anime to the list.     Only specify the params that need to be updated.</p> <p>Parameters:</p> Name Type Description Default <code>anime_id</code> <code>int</code> <p>The id of the anime.</p> required <p>Other Parameters:</p> Name Type Description <code>status</code> <code>AnimeWatchStatus | None</code> <p>The watch status of the anime.</p> <code>is_rewatching</code> <code>bool | None</code> <p>The rewatching status of the anime.</p> <code>score</code> <code>int | None</code> <p>The score of the anime. Score should be in between 0 and 10.</p> <code>num_watched_episodes</code> <code>int | None</code> <p>The number of episodes watched.</p> <code>priority</code> <code>ListPriority | None</code> <p>The priority of the anime in the user list.</p> <code>num_times_rewatched</code> <code>int | None</code> <p>The number of times rewatched.</p> <code>rewatch_value</code> <code>AnimeRewatchValue | None</code> <p>The rewatch value of the anime.</p> <code>tags</code> <code>str | None</code> <p>The tags that need to be added.</p> <code>comments</code> <code>str | None</code> <p>The user comments.</p> <p>Returns:</p> Type Description <code>ResultT[AnimeListUpdate]</code> <p><code>Result</code> containing <code>AnimeListUpdate</code> model on success or <code>HttpErrorResponse</code> data on error.</p> <code>ResultT[AnimeListUpdate]</code> <p><code>HttpErrorResponse.status</code> will be <code>404</code> if no anime with the provided anime_id contains on MAL.</p> Example <pre><code>import aniwrap\nuser_client = aniwrap.UserClient(...)\nresult = await user_client.user.update_anime_list(5114, score=8)\nif result.is_success:\nanime_list_update = result.value\nif result.is_error:\nerror = result.error\nawait user_client.close()\n</code></pre> Source code in <code>aniwrap/services/user.py</code> <pre><code>async def update_anime_list(\nself,\nanime_id: int,\n*,\nstatus: AnimeWatchStatus | None = None,\nis_rewatching: bool | None = None,\nscore: int | None = None,\nnum_watched_episodes: int | None = None,\npriority: ListPriority | None = None,\nnum_times_rewatched: int | None = None,\nrewatch_value: AnimeRewatchValue | None = None,\ntags: str | None = None,\ncomments: str | None = None,\n) -&gt; ResultT[AnimeListUpdate]:\n\"\"\"Update anime details in user anime list. If the anime doesn't already exists, this will add the anime to the list.\n        Only specify the params that need to be updated.\n    Args:\n        anime_id: The id of the anime.\n    Keyword Args:\n        status: The watch status of the anime.\n        is_rewatching: The rewatching status of the anime.\n        score: The score of the anime. Score should be in between 0 and 10.\n        num_watched_episodes: The number of episodes watched.\n        priority: The priority of the anime in the user list.\n        num_times_rewatched: The number of times rewatched.\n        rewatch_value: The rewatch value of the anime.\n        tags: The tags that need to be added.\n        comments: The user comments.\n    Returns:\n        [`Result`][aniwrap.Result] containing [`AnimeListUpdate`][aniwrap.AnimeListUpdate] model on success or `HttpErrorResponse` data on error.\n        `HttpErrorResponse.status` will be `404` if no anime with the provided anime_id contains on MAL.\n    ??? example\n        ```py\n        import aniwrap\n        user_client = aniwrap.UserClient(...)\n        result = await user_client.user.update_anime_list(5114, score=8)\n        if result.is_success:\n            anime_list_update = result.value\n        if result.is_error:\n            error = result.error\n        await user_client.close()\n        ```\n    \"\"\"\ndata = self._generate_data_map(\nstatus=status,\nis_rewatching=is_rewatching,\nscore=None\nif not score\nelse 10\nif score &gt; 10\nelse 0\nif score &lt; 0\nelse score,\nnum_watched_episodes=num_watched_episodes,\npriority=priority.value if priority else None,\nnum_times_rewatched=num_times_rewatched,\nrewatch_value=rewatch_value.value if rewatch_value else None,\ntags=tags,\ncomments=comments,\n)\nroute = endpoints.UPDATE_USER_ANIME_LIST.generate_route(anime_id).with_data(\ndata\n)\nresult = await self._http.fetch(route, HttpMethod.Patch)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_anime_list_update(result.data))\n</code></pre>"},{"location":"reference/services/#aniwrap.services.user.UserService.update_manga_list","title":"update_manga_list  <code>async</code>","text":"<pre><code>update_manga_list(\nmanga_id: str,\n*,\nstatus: MangaReadStatus | None = None,\nis_rereading: bool | None = None,\nscore: int | None = None,\nnum_volumes_read: int | None = None,\nnum_chapters_read: int | None = None,\npriority: ListPriority | None = None,\nnum_times_reread: int | None = None,\nreread_value: MangaRereadValue | None = None,\ntags: str | None = None,\ncomments: str | None = None\n) -&gt; ResultT[MangaListUpdate]\n</code></pre> <p>Update manga details in user manga list. If the manga doesn't already exists, this will add the manga to the list.     Only specify the params that need to be updated/added.</p> <p>Parameters:</p> Name Type Description Default <code>manga_id</code> <code>str</code> <p>The id of the manga.</p> required <p>Other Parameters:</p> Name Type Description <code>status</code> <code>MangaReadStatus | None</code> <p>The Read status of the manga.</p> <code>is_rereading</code> <code>bool | None</code> <p>The rereading status of the manga.</p> <code>score</code> <code>int | None</code> <p>The score of the manga. Score should be in between 0 and 10.</p> <code>num_volumes_read</code> <code>int | None</code> <p>The number of volumes read.</p> <code>num_chapters_read</code> <code>int | None</code> <p>The number of chapters read.</p> <code>priority</code> <code>ListPriority | None</code> <p>The priority of the manga in the user list.</p> <code>num_times_reread</code> <code>int | None</code> <p>The number of times reread.</p> <code>reread_value</code> <code>MangaRereadValue | None</code> <p>The reread value of the manga.</p> <code>tags</code> <code>str | None</code> <p>The tags that need to be added.</p> <code>comments</code> <code>str | None</code> <p>The user comments.</p> <p>Returns:</p> Type Description <code>ResultT[MangaListUpdate]</code> <p><code>Result</code> containing <code>MangaListUpdate</code> model on success or <code>HttpErrorResponse</code> data on error.</p> <code>ResultT[MangaListUpdate]</code> <p><code>HttpErrorResponse.status</code> will be <code>404</code> if no manga with the provided manga_id contains on MAL.</p> Example <pre><code>import aniwrap\nuser_client = aniwrap.UserClient(...)\nresult = await user_client.user.update_manga_list(13759, status=MangaReadStatus.PlanToRead)\nif result.is_success:\nmanga_list_update = result.value\nif result.is_error:\nerror = result.error\nawait user_client.close()\n</code></pre> Source code in <code>aniwrap/services/user.py</code> <pre><code>async def update_manga_list(\nself,\nmanga_id: str,\n*,\nstatus: MangaReadStatus | None = None,\nis_rereading: bool | None = None,\nscore: int | None = None,\nnum_volumes_read: int | None = None,\nnum_chapters_read: int | None = None,\npriority: ListPriority | None = None,\nnum_times_reread: int | None = None,\nreread_value: MangaRereadValue | None = None,\ntags: str | None = None,\ncomments: str | None = None,\n) -&gt; ResultT[MangaListUpdate]:\n\"\"\"Update manga details in user manga list. If the manga doesn't already exists, this will add the manga to the list.\n        Only specify the params that need to be updated/added.\n    Args:\n        manga_id: The id of the manga.\n    Keyword Args:\n        status: The Read status of the manga.\n        is_rereading: The rereading status of the manga.\n        score: The score of the manga. Score should be in between 0 and 10.\n        num_volumes_read: The number of volumes read.\n        num_chapters_read: The number of chapters read.\n        priority: The priority of the manga in the user list.\n        num_times_reread: The number of times reread.\n        reread_value: The reread value of the manga.\n        tags: The tags that need to be added.\n        comments: The user comments.\n    Returns:\n        [`Result`][aniwrap.Result] containing [`MangaListUpdate`][aniwrap.MangaListUpdate] model on success or `HttpErrorResponse` data on error.\n        `HttpErrorResponse.status` will be `404` if no manga with the provided manga_id contains on MAL.\n    ??? example\n        ```py\n        import aniwrap\n        user_client = aniwrap.UserClient(...)\n        result = await user_client.user.update_manga_list(13759, status=MangaReadStatus.PlanToRead)\n        if result.is_success:\n            manga_list_update = result.value\n        if result.is_error:\n            error = result.error\n        await user_client.close()\n        ```\n    \"\"\"\ndata = self._generate_data_map(\nstatus=status,\nis_rereading=is_rereading,\nscore=None\nif not score\nelse 10\nif score &gt; 10\nelse 0\nif score &lt; 0\nelse score,\nnum_volumes_read=num_volumes_read,\nnum_chapters_read=num_chapters_read,\npriority=priority.value if priority else None,\nnum_times_reread=num_times_reread,\nreread_value=reread_value.value if reread_value else None,\ntags=tags,\ncomments=comments,\n)\nroute = endpoints.UPATE_USER_MANGA_LIST.generate_route(manga_id).with_data(data)\nresult = await self._http.fetch(route, HttpMethod.Patch)\nif isinstance(result, HttpErrorResponse):\nreturn Error(result)\nreturn Success(self._serializer.deserialize_manga_list_update(result.data))\n</code></pre>"}]}